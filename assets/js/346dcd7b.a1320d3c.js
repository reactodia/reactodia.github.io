"use strict";(self.webpackChunk_reactodia_reactodia_github_io=self.webpackChunk_reactodia_reactodia_github_io||[]).push([[5802],{24312:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>p,contentTitle:()=>s,default:()=>x,frontMatter:()=>c,metadata:()=>l,toc:()=>m});var t=a(74848),o=a(28453),n=a(92147);a(28774);const i="import * as React from 'react';\r\nimport * as Reactodia from '@reactodia/workspace';\r\n\r\nimport { ExampleToolbarMenu } from './ExampleCommon';\r\n\r\nconst Layouts = Reactodia.defineLayoutWorker(() => new Worker(\r\n  new URL('@reactodia/workspace/layout.worker', import.meta.url)\r\n));\r\n\r\nexport function WikidataExample() {\r\n  const {defaultLayout} = Reactodia.useWorker(Layouts);\r\n\r\n  const {onMount} = Reactodia.useLoadedWorkspace(async ({context, signal}) => {\r\n    const {model} = context;\r\n\r\n    const sparqlProvider = new Reactodia.SparqlDataProvider(\r\n      {\r\n        endpointUrl: 'https://query.wikidata.org/sparql',\r\n        imagePropertyUris: [\r\n          'http://www.wikidata.org/prop/direct/P18',\r\n          'http://www.wikidata.org/prop/direct/P154',\r\n        ]\r\n      },\r\n      {\r\n        ...Reactodia.WikidataSettings,\r\n        // Public Wikidata endpoint is too overloaded for the connection statistics\r\n        linkTypesStatisticsQuery: '',\r\n      });\r\n\r\n    const dataProvider = new Reactodia.IndexedDbCachedProvider({\r\n      baseProvider: sparqlProvider,\r\n      dbName: 'reactodia-wikidata-cache',\r\n      closeSignal: signal,\r\n    });\r\n\r\n    await model.importLayout({ dataProvider, signal });\r\n  }, []);\r\n\r\n  return (\r\n    <Reactodia.Workspace ref={onMount}\r\n      defaultLayout={defaultLayout}\r\n      onIriClick={({ iri }) => window.open(iri)}>\r\n      <Reactodia.DefaultWorkspace\r\n        toolbar={{\r\n          menu: <>\r\n            <ExampleToolbarMenu />\r\n            <ClearWikidataCacheAction />\r\n          </>,\r\n          languages: [\r\n            { code: 'de', label: 'Deutsch' },\r\n            { code: 'en', label: 'english' },\r\n            { code: 'es', label: 'espa\xf1ol' },\r\n            { code: 'fr', label: 'fran\xe7ais' },\r\n            { code: 'ja', label: '\u65e5\u672c\u8a9e' },\r\n            { code: 'hi', label: '\u0939\u093f\u0928\u094d\u0926\u0940' },\r\n            { code: 'pt', label: 'portugu\xeas' },\r\n            { code: 'ru', label: '\u0440\u0443\u0441\u0441\u043a\u0438\u0439' },\r\n            { code: 'zh', label: '\u6c49\u8bed' },\r\n          ],\r\n        }}\r\n      />\r\n    </Reactodia.Workspace>\r\n  );\r\n}\r\n\r\nfunction ClearWikidataCacheAction() {\r\n  return (\r\n    <Reactodia.ToolbarAction\r\n      title='Clear locally-cached data previously fetched from Wikidata'\r\n      onSelect={() => {\r\n        const {model: {dataProvider}} = Reactodia.useWorkspace();\r\n        if (dataProvider instanceof Reactodia.IndexedDbCachedProvider) {\r\n          dataProvider.clearCache();\r\n        }\r\n      }}>\r\n      Clear Wikidata cache\r\n    </Reactodia.ToolbarAction>\r\n  );\r\n}\r\n";var d=a(98576);const c={sidebar_position:5},s="Wikidata Explorer",l={id:"examples/wikidata",title:"Wikidata Explorer",description:"Example demonstrating large graph exploration capabilities on public Wikidata dataset.",source:"@site/docs/examples/wikidata.mdx",sourceDirName:"examples",slug:"/examples/wikidata",permalink:"/docs/examples/wikidata",draft:!1,unlisted:!1,editUrl:"https://github.com/reactodia/reactodia.github.io/tree/main/docs/examples/wikidata.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docs",previous:{title:"Stress Test",permalink:"/docs/examples/stress-test"}},p={},m=[];function u(e){const r={a:"a",admonition:"admonition",h1:"h1",p:"p",...(0,o.R)(),...e.components},{Details:a}=r;return a||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"wikidata-explorer",children:"Wikidata Explorer"}),"\n",(0,t.jsx)(r.p,{children:"Example demonstrating large graph exploration capabilities on public Wikidata dataset."}),"\n",(0,t.jsx)(r.admonition,{type:"tip",children:(0,t.jsx)(r.p,{children:(0,t.jsx)(r.a,{href:"/live-demo/wikidata",children:"\u25b6\ufe0e Open live demo"})})}),"\n","\n","\n",(0,t.jsx)(n.A,{language:"tsx",title:"/src/examples/ReactodiaWikidata.tsx",showLineNumbers:!0,children:i}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"ExampleCommon.tsx"}),(0,t.jsx)(n.A,{language:"tsx",title:"/src/examples/ExampleCommon.tsx",showLineNumbers:!0,children:d})]})]})}function x(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},86871:(e,r,a)=>{a.r(r),a.d(r,{N3:()=>t});var t=a(48640)},71712:(e,r,a)=>{a.r(r),a.d(r,{Reactodia:()=>t});var t=a(19738)},51433:(e,r,a)=>{a.d(r,{A:()=>o});var t=a(96540);const o={React:t,...t,get Reactodia(){const{Reactodia:e}=a(71712);return e},get N3(){const{N3:e}=a(86871);return e},get Layouts(){const{Reactodia:e}=a(71712);return e.defineLayoutWorker((()=>new Worker(new URL(a.p+a.u(86970),a.b))))}}},98576:e=>{e.exports="import * as React from 'react';\r\nimport * as Reactodia from '@reactodia/workspace';\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport function ExampleToolbarMenu() {\r\n  const {model, editor} = Reactodia.useWorkspace();\r\n  return (\r\n    <>\r\n      <Reactodia.ToolbarActionOpen\r\n        fileAccept='.json'\r\n        onSelect={async file => {\r\n          const preloadedElements = new Map<Reactodia.ElementIri, Reactodia.ElementModel>();\r\n          for (const element of model.elements) {\r\n            preloadedElements.set(element.iri, element.data);\r\n          }\r\n\r\n          const json = await file.text();\r\n          try {\r\n            const diagramLayout = JSON.parse(json);\r\n            await model.importLayout({\r\n              dataProvider: model.dataProvider,\r\n              diagram: diagramLayout,\r\n              preloadedElements,\r\n              validateLinks: true,\r\n            });\r\n          } catch (err) {\r\n            alert('Failed to load specified file with a diagram layout.');\r\n          }\r\n        }}>\r\n        Open diagram from file\r\n      </Reactodia.ToolbarActionOpen>\r\n      <Reactodia.ToolbarActionSave mode='layout'\r\n        onSelect={() => {\r\n          const diagramLayout = model.exportLayout();\r\n          const layoutString = JSON.stringify(diagramLayout);\r\n          const blob = new Blob([layoutString], {type: 'application/json'});\r\n          const timestamp = new Date().toISOString().replaceAll(/[Z\\s:-]/g, '');\r\n          saveAs(blob, `reactodia-diagram-${timestamp}.json`);\r\n        }}>\r\n        Save diagram to file\r\n      </Reactodia.ToolbarActionSave>\r\n      {editor.inAuthoringMode ? (\r\n        <Reactodia.ToolbarActionSave mode='authoring'\r\n          onSelect={() => {\r\n            const state = editor.authoringState;\r\n            console.log('Authoring state:', state);\r\n            alert('Please check browser console for result');\r\n          }}>\r\n          Persist changes to data\r\n        </Reactodia.ToolbarActionSave>\r\n      ) : null}\r\n      <Reactodia.ToolbarActionClearAll />\r\n      <Reactodia.ToolbarActionExport kind='exportRaster' />\r\n      <Reactodia.ToolbarActionExport kind='exportSvg' />\r\n      <Reactodia.ToolbarActionExport kind='print' />\r\n    </>\r\n  );\r\n}\r\n"}}]);