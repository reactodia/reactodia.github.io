"use strict";(self.webpackChunk_reactodia_reactodia_github_io=self.webpackChunk_reactodia_reactodia_github_io||[]).push([[74808],{7720:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=a(64922),n=a(16593);const o={sidebar_position:1,title:"Live Playground"},i="Playground with the live editor",s={id:"examples/live",title:"Live Playground",description:"Workspace usage example via live editor block which updates on every change.",source:"@site/docs/examples/live.md",sourceDirName:"examples",slug:"/examples/live",permalink:"/docs/examples/live",draft:!1,unlisted:!1,editUrl:"https://github.com/reactodia/reactodia.github.io/tree/main/docs/examples/live.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Live Playground"},sidebar:"docs",previous:{title:"Examples",permalink:"/docs/category/examples"},next:{title:"Basic Workspace",permalink:"/docs/examples/basic"}},c={},d=[];function l(e){const t={code:"code",h1:"h1",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h1,{id:"playground-with-the-live-editor",children:"Playground with the live editor"}),"\n",(0,r.jsx)(t.p,{children:"Workspace usage example via live editor block which updates on every change."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",metastring:"live",live:!0,children:"function SimpleExample() {\r\n    const GRAPH_DATA =\r\n        'https://raw.githubusercontent.com/reactodia/reactodia-workspace/' +\r\n        'master/examples/resources/orgOntology.ttl';\r\n\r\n    const {defaultLayout} = Reactodia.useWorker(Layouts);\r\n\r\n    const {onMount} = Reactodia.useLoadedWorkspace(async ({context, signal}) => {\r\n        const {model, performLayout} = context;\r\n        // Fetch graph data to use as underlying data source\r\n        const response = await fetch(GRAPH_DATA, {signal});\r\n        const graphData = new N3.Parser().parse(await response.text());\r\n        const dataProvider = new Reactodia.RdfDataProvider({acceptBlankNodes: false});\r\n        dataProvider.addGraph(graphData);\r\n\r\n        // Create empty diagram and put owl:Class entities with links between them\r\n        await model.createNewDiagram({dataProvider, signal});\r\n        const elementTypeId = 'http://www.w3.org/2002/07/owl#Class' as Reactodia.ElementTypeIri;\r\n        for (const {element} of await dataProvider.lookup({elementTypeId})) {\r\n            model.createElement(element);\r\n        }\r\n        await model.requestLinksOfType();\r\n\r\n        // Layout elements on canvas\r\n        await performLayout({signal});\r\n    }, []);\r\n\r\n    return (\r\n        <div className='reactodia-live-editor'>\r\n            <Reactodia.Workspace ref={onMount}\r\n                defaultLayout={defaultLayout}>\r\n                <Reactodia.DefaultWorkspace />\r\n            </Reactodia.Workspace>\r\n        </div>\r\n    );\r\n}\n"})})]})}function p(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},16593:(e,t,a)=>{a.d(t,{R:()=>i,x:()=>s});var r=a(77810);const n={},o=r.createContext(n);function i(e){const t=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:i(e.components),r.createElement(o.Provider,{value:t},e.children)}}}]);