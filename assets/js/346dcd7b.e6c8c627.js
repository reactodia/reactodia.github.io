"use strict";(self.webpackChunk_reactodia_reactodia_github_io=self.webpackChunk_reactodia_reactodia_github_io||[]).push([[5802],{11340:(r,e,a)=>{a.r(e),a.d(e,{Reactodia:()=>t});var t=a(96333)},30193:(r,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>g,frontMatter:()=>c,metadata:()=>t,toc:()=>m});const t=JSON.parse('{"id":"examples/wikidata","title":"Wikidata Explorer","description":"Example demonstrating large graph exploration capabilities on public Wikidata dataset.","source":"@site/docs/examples/wikidata.mdx","sourceDirName":"examples","slug":"/examples/wikidata","permalink":"/docs/examples/wikidata","draft":false,"unlisted":false,"editUrl":"https://github.com/reactodia/reactodia.github.io/tree/main/docs/examples/wikidata.mdx","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"docs","previous":{"title":"Stress Test","permalink":"/docs/examples/stress-test"},"next":{"title":"Classic Workspace","permalink":"/docs/examples/classic-workspace"}}');var n=a(64922),o=a(16593),i=a(46720);a(43946);const s="import * as React from 'react';\r\nimport * as Reactodia from '@reactodia/workspace';\r\n\r\nimport { ExampleToolbarMenu } from './ExampleCommon';\r\n\r\nconst Layouts = Reactodia.defineLayoutWorker(() => new Worker(\r\n  new URL('@reactodia/workspace/layout.worker', import.meta.url)\r\n));\r\n\r\nexport function PlaygroundWikidata() {\r\n  const {defaultLayout} = Reactodia.useWorker(Layouts);\r\n\r\n  const {onMount} = Reactodia.useLoadedWorkspace(async ({context, signal}) => {\r\n    const {model, getCommandBus} = context;\r\n\r\n    const sparqlProvider = new Reactodia.SparqlDataProvider(\r\n      {\r\n        endpointUrl: 'https://query.wikidata.org/sparql',\r\n        imagePropertyUris: [\r\n          'http://www.wikidata.org/prop/direct/P18',\r\n          'http://www.wikidata.org/prop/direct/P154',\r\n        ]\r\n      },\r\n      {\r\n        ...Reactodia.WikidataSettings,\r\n        filterOnlyLanguages: ['de', 'en', 'es', 'ru', 'zh'],\r\n        // Public Wikidata endpoint is too overloaded for the connection statistics\r\n        linkTypesStatisticsQuery: '',\r\n      });\r\n\r\n    const dataProvider = new Reactodia.IndexedDbCachedProvider({\r\n      baseProvider: sparqlProvider,\r\n      dbName: 'reactodia-wikidata-cache',\r\n      closeSignal: signal,\r\n    });\r\n\r\n    await model.importLayout({ dataProvider, signal });\r\n\r\n    getCommandBus(Reactodia.UnifiedSearchTopic)\r\n      .trigger('focus', {sectionKey: 'entities'});\r\n  }, []);\r\n\r\n  const suggestProperties = React.useCallback<Reactodia.PropertySuggestionHandler>(params => {\r\n    const scores = params.properties.map((iri, index): Reactodia.PropertyScore => {\r\n      // Assumption is smaller P-properties were created earlier and are more interesting\r\n      const match = /P([0-9]+)$/.exec(iri);\r\n      return {\r\n        propertyIri: iri,\r\n        score: match ? -Number(match[1]) : (params.properties.length - index),\r\n      };\r\n    });\r\n    return Promise.resolve(scores);\r\n  }, []);\r\n\r\n  return (\r\n    <Reactodia.Workspace ref={onMount}\r\n      defaultLayout={defaultLayout}>\r\n      <Reactodia.DefaultWorkspace\r\n        menu={\r\n          <>\r\n            <ExampleToolbarMenu />\r\n            <ClearWikidataCacheAction />\r\n          </>\r\n        }\r\n        connectionsMenu={{suggestProperties}}\r\n        languages={[\r\n          { code: 'de', label: 'Deutsch' },\r\n          { code: 'en', label: 'english' },\r\n          { code: 'es', label: 'espa\xf1ol' },\r\n          { code: 'ru', label: '\u0440\u0443\u0441\u0441\u043a\u0438\u0439' },\r\n          { code: 'zh', label: '\u6c49\u8bed' },\r\n        ]}\r\n      />\r\n    </Reactodia.Workspace>\r\n  );\r\n}\r\n\r\nfunction ClearWikidataCacheAction() {\r\n  const {model} = Reactodia.useWorkspace();\r\n  return (\r\n    <Reactodia.ToolbarAction\r\n      title='Clear locally-cached data previously fetched from Wikidata'\r\n      onSelect={() => {\r\n        const {dataProvider} = model;\r\n        if (dataProvider instanceof Reactodia.IndexedDbCachedProvider) {\r\n          dataProvider.clearCache();\r\n        }\r\n      }}>\r\n      Clear Wikidata cache\r\n    </Reactodia.ToolbarAction>\r\n  );\r\n}\r\n";var d=a(98576);const c={sidebar_position:8},l="Wikidata Explorer",p={},m=[];function u(r){const e={a:"a",admonition:"admonition",h1:"h1",header:"header",p:"p",...(0,o.R)(),...r.components},{Details:a}=e;return a||function(r,e){throw new Error("Expected "+(e?"component":"object")+" `"+r+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.header,{children:(0,n.jsx)(e.h1,{id:"wikidata-explorer",children:"Wikidata Explorer"})}),"\n",(0,n.jsxs)(e.p,{children:["Example demonstrating large graph exploration capabilities on public ",(0,n.jsx)(e.a,{href:"https://www.wikidata.org",children:"Wikidata"})," dataset."]}),"\n",(0,n.jsx)(e.admonition,{type:"info",children:(0,n.jsx)(e.p,{children:(0,n.jsx)(e.a,{href:"/playground/wikidata",children:"\u25b6\ufe0e Open live demo"})})}),"\n","\n",(0,n.jsx)(i.A,{language:"tsx",title:"/src/examples/PlaygroundWikidata.tsx",showLineNumbers:!0,children:s}),"\n",(0,n.jsxs)(a,{children:[(0,n.jsx)("summary",{children:"ExampleCommon.tsx"}),(0,n.jsx)(i.A,{language:"tsx",title:"/src/examples/ExampleCommon.tsx",showLineNumbers:!0,children:d})]})]})}function g(r={}){const{wrapper:e}={...(0,o.R)(),...r.components};return e?(0,n.jsx)(e,{...r,children:(0,n.jsx)(u,{...r})}):u(r)}},64685:(r,e,a)=>{a.d(e,{A:()=>n});var t=a(77810);const n={React:t,...t,get Reactodia(){const{Reactodia:r}=a(11340);return r},get N3(){const{N3:r}=a(90211);return r},get Layouts(){const{Reactodia:r}=a(11340);return r.defineLayoutWorker((()=>new Worker(new URL(a.p+a.u(99682),a.b))))}}},90211:(r,e,a)=>{a.r(e),a.d(e,{N3:()=>t});var t=a(56881)},98576:r=>{r.exports="import * as React from 'react';\r\nimport * as Reactodia from '@reactodia/workspace';\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport function ExampleToolbarMenu() {\r\n  const {model, editor, overlay} = Reactodia.useWorkspace();\r\n  return (\r\n    <>\r\n      <Reactodia.ToolbarActionOpen\r\n        hotkey='Mod+O'\r\n        fileAccept='.json'\r\n        onSelect={async file => {\r\n          const preloadedElements = new Map<Reactodia.ElementIri, Reactodia.ElementModel>();\r\n          for (const element of model.elements) {\r\n            for (const data of Reactodia.iterateEntitiesOf(element)) {\r\n              preloadedElements.set(data.id, data);\r\n            }\r\n          }\r\n\r\n          const task = overlay.startTask({title: 'Importing a layout from file'});\r\n          try {\r\n            const json = await file.text();\r\n            const diagramLayout = JSON.parse(json);\r\n            await model.importLayout({\r\n              dataProvider: model.dataProvider,\r\n              diagram: diagramLayout,\r\n              preloadedElements,\r\n              validateLinks: true,\r\n            });\r\n          } catch (err) {\r\n            task.setError(new Error(\r\n              'Failed to load specified file with a diagram layout.',\r\n              {cause: err}\r\n            ));\r\n          } finally {\r\n            task.end();\r\n          }\r\n        }}>\r\n        Open diagram from file\r\n      </Reactodia.ToolbarActionOpen>\r\n      <Reactodia.ToolbarActionSave mode='layout'\r\n        hotkey='Mod+S'\r\n        onSelect={() => {\r\n          const diagramLayout = model.exportLayout();\r\n          const layoutString = JSON.stringify(diagramLayout);\r\n          const blob = new Blob([layoutString], {type: 'application/json'});\r\n          const timestamp = new Date().toISOString().replaceAll(/[Z\\s:-]/g, '');\r\n          saveAs(blob, `reactodia-diagram-${timestamp}.json`);\r\n        }}>\r\n        Save diagram to file\r\n      </Reactodia.ToolbarActionSave>\r\n      {editor.inAuthoringMode ? (\r\n        <Reactodia.ToolbarActionSave mode='authoring'\r\n          onSelect={() => {\r\n            const state = editor.authoringState;\r\n            console.log('Authoring state:', state);\r\n            alert('Please check browser console for result');\r\n          }}>\r\n          Persist changes to data\r\n        </Reactodia.ToolbarActionSave>\r\n      ) : null}\r\n      <Reactodia.ToolbarActionClearAll />\r\n      <Reactodia.ToolbarActionExport kind='exportRaster' />\r\n      <Reactodia.ToolbarActionExport kind='exportSvg' />\r\n      <Reactodia.ToolbarActionExport kind='print' hotkey='Mod+P' />\r\n    </>\r\n  );\r\n}\r\n"}}]);