"use strict";(self.webpackChunk_reactodia_reactodia_github_io=self.webpackChunk_reactodia_reactodia_github_io||[]).push([[6444],{43500:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>p,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var n=t(74848),a=t(28453),o=t(92147);t(28774);const s="import * as React from 'react';\r\nimport * as Reactodia from '@reactodia/workspace';\r\n\r\nimport { ExampleToolbarMenu } from './ExampleCommon';\r\n\r\nconst Layouts = Reactodia.defineLayoutWorker(() => new Worker(\r\n  new URL('@reactodia/workspace/layout.worker', import.meta.url)\r\n));\r\n\r\nexport function PlaygroundStressTest(props: {\r\n  nodeCount?: number;\r\n  edgesPerNode?: number;\r\n}) {\r\n  const {nodeCount = 500, edgesPerNode = 2} = props;\r\n\r\n  const {defaultLayout} = Reactodia.useWorker(Layouts);\r\n\r\n  const {onMount} = Reactodia.useLoadedWorkspace(async ({context, signal}) => {\r\n    const {model, view} = context;\r\n\r\n    const dataProvider = new Reactodia.RdfDataProvider();\r\n    const [graphData, nodes] = createLayout(nodeCount, edgesPerNode, dataProvider.factory);\r\n    dataProvider.addGraph(graphData);\r\n\r\n    await model.importLayout({dataProvider, signal});\r\n\r\n    const rowCount = Math.floor(Math.sqrt(nodes.length));\r\n    const estimatedWidth = 200;\r\n    const estimatedHeight = 100;\r\n    const batch = model.history.startBatch();\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      const nodeId = nodes[i];\r\n      const x = (i % rowCount) * estimatedWidth;\r\n      const y = Math.floor(i / rowCount) * estimatedHeight;\r\n      model.addElement(new Reactodia.EntityElement({\r\n        id: `n:${i}`,\r\n        data: Reactodia.EntityElement.placeholderData(nodeId),\r\n        position: {x, y},\r\n      }));\r\n    }\r\n    batch.store();\r\n    await Promise.all([\r\n      model.requestElementData(nodes),\r\n      model.requestLinks(),\r\n    ]);\r\n    model.history.reset();\r\n\r\n    const canvas = view.findAnyCanvas();\r\n    if (canvas) {\r\n      canvas.renderingState.syncUpdate();\r\n      canvas.zoomToFit();\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <Reactodia.Workspace ref={onMount}\r\n      defaultLayout={defaultLayout}>\r\n      <Reactodia.DefaultWorkspace\r\n        menu={<ExampleToolbarMenu />}\r\n        search={null}\r\n        navigator={{expanded: false}}\r\n      />\r\n    </Reactodia.Workspace>\r\n  );\r\n}\r\n\r\nfunction createLayout(\r\n  nodeCount: number,\r\n  edgesPerNode: number,\r\n  factory: Reactodia.Rdf.DataFactory\r\n): [Reactodia.Rdf.Quad[], Reactodia.ElementIri[]] {\r\n  const rdfType = factory.namedNode('http://www.w3.org/1999/02/22-rdf-syntax-ns#type');\r\n  const rdfsLabel = factory.namedNode('http://www.w3.org/2000/01/rdf-schema#label');\r\n  const nodeType = factory.namedNode('urn:test:Node');\r\n  const linkType = factory.namedNode('urn:test:link');\r\n\r\n  const makeNodeIri = (n: number) => factory.namedNode(\r\n    `urn:test:n:${n}` as Reactodia.ElementIri\r\n  );\r\n\r\n  const elementIris: Reactodia.ElementIri[] = [];\r\n  const quads: Reactodia.Rdf.Quad[] = [];\r\n  for (let i = 0; i < nodeCount; i++) {\r\n    const iri = makeNodeIri(i);\r\n    elementIris.push(iri.value);\r\n    quads.push(\r\n      factory.quad(iri, rdfType, nodeType),\r\n      factory.quad(iri, rdfsLabel, factory.literal(`Node ${i}`))\r\n    );\r\n\r\n    for (let j = 0; j < edgesPerNode; j++) {\r\n      const target = i - j - 1;\r\n      if (target >= 0) {\r\n        quads.push(factory.quad(iri, linkType, makeNodeIri(target)));\r\n      }\r\n    }\r\n  }\r\n\r\n  return [quads, elementIris];\r\n}\r\n";var d=t(98576);const i={sidebar_position:5},c="Stress Test",l={id:"examples/stress-test",title:"Stress Test",description:"Example demonstrating how workspace handles large graphs with many elements and links.",source:"@site/docs/examples/stress-test.mdx",sourceDirName:"examples",slug:"/examples/stress-test",permalink:"/docs/examples/stress-test",draft:!1,unlisted:!1,editUrl:"https://github.com/reactodia/reactodia.github.io/tree/main/docs/examples/stress-test.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docs",previous:{title:"SPARQL Navigator",permalink:"/docs/examples/sparql"},next:{title:"Wikidata Explorer",permalink:"/docs/examples/wikidata"}},p={},m=[];function u(e){const r={a:"a",admonition:"admonition",h1:"h1",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,a.R)(),...e.components},{Details:t}=r;return t||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.h1,{id:"stress-test",children:"Stress Test"}),"\n",(0,n.jsx)(r.p,{children:"Example demonstrating how workspace handles large graphs with many elements and links."}),"\n",(0,n.jsxs)(r.admonition,{type:"tip",children:[(0,n.jsx)(r.p,{children:(0,n.jsx)(r.a,{href:"/playground/stress-test",children:"\u25b6\ufe0e Open demo with default settings"})}),(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{}),(0,n.jsx)(r.th,{children:"250 nodes"}),(0,n.jsx)(r.th,{children:"500 nodes"}),(0,n.jsx)(r.th,{children:"1000 nodes"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"2 edges each"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/playground/stress-test?node-count=250&edges-per-node=2",children:"\u25b6\ufe0e Open"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/playground/stress-test?node-count=500&edges-per-node=2",children:"\u25b6\ufe0e Open"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/playground/stress-test?node-count=1000&edges-per-node=2",children:"\u25b6\ufe0e Open"})})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:"4 edges each"}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/playground/stress-test?node-count=250&edges-per-node=4",children:"\u25b6\ufe0e Open"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/playground/stress-test?node-count=500&edges-per-node=4",children:"\u25b6\ufe0e Open"})}),(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/playground/stress-test?node-count=1000&edges-per-node=4",children:"\u25b6\ufe0e Open"})})]})]})]})]}),"\n","\n","\n",(0,n.jsx)(o.A,{language:"tsx",title:"/src/examples/PlaygroundStressTest.tsx",showLineNumbers:!0,children:s}),"\n",(0,n.jsxs)(t,{children:[(0,n.jsx)("summary",{children:"ExampleCommon.tsx"}),(0,n.jsx)(o.A,{language:"tsx",title:"/src/examples/ExampleCommon.tsx",showLineNumbers:!0,children:d})]})]})}function h(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}},86871:(e,r,t)=>{t.r(r),t.d(r,{N3:()=>n});var n=t(48640)},71712:(e,r,t)=>{t.r(r),t.d(r,{Reactodia:()=>n});var n=t(19738)},51433:(e,r,t)=>{t.d(r,{A:()=>a});var n=t(96540);const a={React:n,...n,get Reactodia(){const{Reactodia:e}=t(71712);return e},get N3(){const{N3:e}=t(86871);return e},get Layouts(){const{Reactodia:e}=t(71712);return e.defineLayoutWorker((()=>new Worker(new URL(t.p+t.u(86970),t.b))))}}},98576:e=>{e.exports="import * as React from 'react';\r\nimport * as Reactodia from '@reactodia/workspace';\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport function ExampleToolbarMenu() {\r\n  const {model, editor, overlay} = Reactodia.useWorkspace();\r\n  return (\r\n    <>\r\n      <Reactodia.ToolbarActionOpen\r\n        fileAccept='.json'\r\n        onSelect={async file => {\r\n          const preloadedElements = new Map<Reactodia.ElementIri, Reactodia.ElementModel>();\r\n          for (const element of model.elements) {\r\n            for (const data of Reactodia.iterateEntitiesOf(element)) {\r\n              preloadedElements.set(data.id, data);\r\n            }\r\n          }\r\n\r\n          const task = overlay.startTask({title: 'Importing a layout from file'});\r\n          try {\r\n            const json = await file.text();\r\n            const diagramLayout = JSON.parse(json);\r\n            await model.importLayout({\r\n              dataProvider: model.dataProvider,\r\n              diagram: diagramLayout,\r\n              preloadedElements,\r\n              validateLinks: true,\r\n            });\r\n          } catch (err) {\r\n            task.setError(new Error(\r\n              'Failed to load specified file with a diagram layout.',\r\n              {cause: err}\r\n            ));\r\n          } finally {\r\n            task.end();\r\n          }\r\n        }}>\r\n        Open diagram from file\r\n      </Reactodia.ToolbarActionOpen>\r\n      <Reactodia.ToolbarActionSave mode='layout'\r\n        onSelect={() => {\r\n          const diagramLayout = model.exportLayout();\r\n          const layoutString = JSON.stringify(diagramLayout);\r\n          const blob = new Blob([layoutString], {type: 'application/json'});\r\n          const timestamp = new Date().toISOString().replaceAll(/[Z\\s:-]/g, '');\r\n          saveAs(blob, `reactodia-diagram-${timestamp}.json`);\r\n        }}>\r\n        Save diagram to file\r\n      </Reactodia.ToolbarActionSave>\r\n      {editor.inAuthoringMode ? (\r\n        <Reactodia.ToolbarActionSave mode='authoring'\r\n          onSelect={() => {\r\n            const state = editor.authoringState;\r\n            console.log('Authoring state:', state);\r\n            alert('Please check browser console for result');\r\n          }}>\r\n          Persist changes to data\r\n        </Reactodia.ToolbarActionSave>\r\n      ) : null}\r\n      <Reactodia.ToolbarActionClearAll />\r\n      <Reactodia.ToolbarActionExport kind='exportRaster' />\r\n      <Reactodia.ToolbarActionExport kind='exportSvg' />\r\n      <Reactodia.ToolbarActionExport kind='print' />\r\n    </>\r\n  );\r\n}\r\n"}}]);