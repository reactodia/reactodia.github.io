"use strict";(self.webpackChunk_reactodia_reactodia_github_io=self.webpackChunk_reactodia_reactodia_github_io||[]).push([[31970],{16593:(e,r,a)=>{a.d(r,{R:()=>s,x:()=>d});var t=a(77810);const n={},i=t.createContext(n);function s(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function d(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:s(e.components),t.createElement(i.Provider,{value:r},e.children)}},70959:(e,r,a)=>{a.r(r),a.d(r,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"concepts/data-provider","title":"Data Provider","description":"Reactodia defines a contract (DataProvider interface) to query a subset of data from external source (data graph) to provide means for incremental data loading when exploring the graph.","source":"@site/docs/concepts/data-provider.md","sourceDirName":"concepts","slug":"/concepts/data-provider","permalink":"/docs/concepts/data-provider","draft":false,"unlisted":false,"editUrl":"https://github.com/reactodia/reactodia.github.io/tree/main/docs/concepts/data-provider.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"docs","previous":{"title":"Graph Model","permalink":"/docs/concepts/graph-model"},"next":{"title":"Event System","permalink":"/docs/concepts/event-system"}}');var n=a(64922),i=a(16593);const s={sidebar_position:2},d="Data Provider",o={},c=[{value:"IRI and RDF",id:"iri-and-rdf",level:2},{value:"Data Providers",id:"data-providers",level:2},{value:"Example: provisioning an <code>RdfDataProvider</code> from a graph data in JSON Graph Format",id:"example-provisioning-an-rdfdataprovider-from-a-graph-data-in-json-graph-format",level:3}];function l(e){const r={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"data-provider",children:"Data Provider"})}),"\n",(0,n.jsxs)(r.p,{children:["Reactodia defines a contract (",(0,n.jsx)(r.a,{href:"/docs/api/workspace/interfaces/DataProvider",children:(0,n.jsx)(r.code,{children:"DataProvider"})})," interface) to query a subset of data from external source (",(0,n.jsx)(r.a,{href:"/docs/concepts/graph-model#data-graph",children:"data graph"}),") to provide means for incremental data loading when exploring the graph."]}),"\n",(0,n.jsx)(r.h2,{id:"iri-and-rdf",children:"IRI and RDF"}),"\n",(0,n.jsxs)(r.p,{children:["Reactodia uses RDF (",(0,n.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Resource_Description_Framework",children:"Resource Description Framework"}),") as a representation format for the graph data. The core concepts of RDF are:"]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"IRI"})," (",(0,n.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/Internationalized_Resource_Identifier",children:"Internationalized Resource Identifier"}),") \u2014 basically a URI but not limited to ASCII and may contain most unicode characters."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"resource"})," \u2014 a graph node (element) represented by an ",(0,n.jsx)(r.strong,{children:"IRI"})," (in which case it is a ",(0,n.jsx)(r.strong,{children:"named node"}),") or a anonymous dataset-local identifier (it which case it is a ",(0,n.jsx)(r.strong,{children:"blank node"}),")."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"literal"})," \u2014 a simple value represented by a string with a ",(0,n.jsx)(r.em,{children:"datatype"})," or a ",(0,n.jsx)(r.em,{children:"language"})," tag."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"triple"})," \u2014 an expressions of the form ",(0,n.jsx)(r.em,{children:"subject"}),"\u2013",(0,n.jsx)(r.em,{children:"predicate"}),"\u2013",(0,n.jsx)(r.em,{children:"object"})," to represent a graph edge of type ",(0,n.jsx)(r.em,{children:"predicate"})," (link type) between ",(0,n.jsx)(r.em,{children:"source"})," ",(0,n.jsx)(r.strong,{children:"resource"})," and ",(0,n.jsx)(r.em,{children:"target"})," ",(0,n.jsx)(r.strong,{children:"resource"})," or ",(0,n.jsx)(r.strong,{children:"literal"}),"."]}),"\n",(0,n.jsxs)(r.li,{children:[(0,n.jsx)(r.strong,{children:"quad"})," \u2014 a ",(0,n.jsx)(r.strong,{children:"triple"})," with an additional associated ",(0,n.jsx)(r.em,{children:"graph"})," ",(0,n.jsx)(r.strong,{children:"IRI"}),"."]}),"\n"]}),"\n",(0,n.jsxs)(r.p,{children:["For interoperability with other RDF-based libraries for JavaScript, the property values for entities and relations are stored as either ",(0,n.jsx)(r.strong,{children:"named node"})," or ",(0,n.jsx)(r.strong,{children:"literal"})," values using commonly used ",(0,n.jsx)(r.a,{href:"https://rdf.js.org/",children:"RDF/JS"})," representation."]}),"\n",(0,n.jsxs)(r.p,{children:["To provide improved type-safety with TypeScript when dealing with various kinds of IRIs from the ",(0,n.jsx)(r.a,{href:"/docs/concepts/graph-model#data-graph",children:"data graph"}),", the library uses the following ",(0,n.jsx)(r.a,{href:"https://www.learningtypescript.com/articles/branded-types",children:"branded string types"}),":"]}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Type"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/docs/api/workspace/type-aliases/ElementIri",children:(0,n.jsx)(r.code,{children:"ElementIri"})})}),(0,n.jsxs)(r.td,{children:["IRI of a entity (",(0,n.jsx)(r.strong,{children:"resource"}),")."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/docs/api/workspace/type-aliases/ElementTypeIri",children:(0,n.jsx)(r.code,{children:"ElementTypeIri"})})}),(0,n.jsxs)(r.td,{children:["IRI of a entity type (",(0,n.jsx)(r.strong,{children:"resource"}),")."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/docs/api/workspace/type-aliases/LinkTypeIri",children:(0,n.jsx)(r.code,{children:"LinkTypeIri"})})}),(0,n.jsxs)(r.td,{children:["IRI of a link type, i.e. triple ",(0,n.jsx)(r.em,{children:"predicate"})," when the ",(0,n.jsx)(r.strong,{children:"object"})," is a ",(0,n.jsx)(r.strong,{children:"resource"})," (the predicate is always a ",(0,n.jsx)(r.strong,{children:"named node"}),")."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/docs/api/workspace/type-aliases/PropertyTypeIri",children:(0,n.jsx)(r.code,{children:"PropertyTypeIri"})})}),(0,n.jsxs)(r.td,{children:["IRI of a property type, i.e. triple ",(0,n.jsx)(r.strong,{children:"predicate"})," when the ",(0,n.jsx)(r.strong,{children:"object"})," is a ",(0,n.jsx)(r.strong,{children:"literal"})," (the predicate is always a ",(0,n.jsx)(r.strong,{children:"named node"}),")."]})]})]})]}),"\n",(0,n.jsx)(r.h2,{id:"data-providers",children:"Data Providers"}),"\n",(0,n.jsxs)(r.p,{children:["The library provides a number of built-in ",(0,n.jsx)(r.a,{href:"/docs/api/workspace/interfaces/DataProvider",children:(0,n.jsx)(r.code,{children:"DataProvider"})})," interface implementations for various scenarios:"]}),"\n",(0,n.jsxs)(r.table,{children:[(0,n.jsx)(r.thead,{children:(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.th,{children:"Provider"}),(0,n.jsx)(r.th,{children:"Description"})]})}),(0,n.jsxs)(r.tbody,{children:[(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/docs/api/workspace/classes/EmptyDataProvider",children:(0,n.jsx)(r.code,{children:"EmptyDataProvider"})})}),(0,n.jsx)(r.td,{children:"An empty provider which returns nothing from all query methods."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/docs/api/workspace/classes/RdfDataProvider",children:(0,n.jsx)(r.code,{children:"RdfDataProvider"})})}),(0,n.jsxs)(r.td,{children:["Provides graph data from an in-memory ",(0,n.jsx)(r.a,{href:"https://rdf.js.org/data-model-spec/",children:"RDF/JS-compatible"})," graph dataset."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/docs/api/workspace/classes/SparqlDataProvider",children:(0,n.jsx)(r.code,{children:"SparqlDataProvider"})})}),(0,n.jsxs)(r.td,{children:["Provides graph data by requesting it from a ",(0,n.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/SPARQL",children:"SPARQL"})," endpoint."]})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/docs/api/workspace/classes/CompositeDataProvider",children:(0,n.jsx)(r.code,{children:"CompositeDataProvider"})})}),(0,n.jsx)(r.td,{children:"Provides graph data by combining results from multiple other data providers."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/docs/api/workspace/classes/DecoratedDataProvider",children:(0,n.jsx)(r.code,{children:"DecoratedDataProvider"})})}),(0,n.jsx)(r.td,{children:"Generically wraps over another provider to modify how the requests are made or alter the results."})]}),(0,n.jsxs)(r.tr,{children:[(0,n.jsx)(r.td,{children:(0,n.jsx)(r.a,{href:"/docs/api/workspace/classes/IndexedDbCachedProvider",children:(0,n.jsx)(r.code,{children:"IndexedDbCachedProvider"})})}),(0,n.jsxs)(r.td,{children:["Caches graph data returned from another data provider using browser's built-in ",(0,n.jsx)(r.a,{href:"https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API",children:"IndexedDB"})," storage."]})]})]})]}),"\n",(0,n.jsx)(r.admonition,{type:"tip",children:(0,n.jsxs)(r.p,{children:["It is recommended to extend ",(0,n.jsx)(r.a,{href:"/docs/api/workspace/classes/EmptyDataProvider",children:(0,n.jsx)(r.code,{children:"EmptyDataProvider"})})," when implementing a data provider: this way methods can be implemented one-by-one as needed and no changes will be necessary if ",(0,n.jsx)(r.code,{children:"DataProvider"})," will gain additional methods in the future."]})}),"\n",(0,n.jsxs)(r.h3,{id:"example-provisioning-an-rdfdataprovider-from-a-graph-data-in-json-graph-format",children:["Example: provisioning an ",(0,n.jsx)(r.code,{children:"RdfDataProvider"})," from a graph data in JSON Graph Format"]}),"\n",(0,n.jsxs)(r.p,{children:["In this example Reactodia is initialized with ",(0,n.jsx)(r.code,{children:"RdfDataProvider"})," which is provisioned with graph data in ",(0,n.jsx)(r.a,{href:"https://github.com/jsongraph/json-graph-specification",children:"JSON Graph Format"}),"."]}),"\n",(0,n.jsxs)(r.p,{children:["As a first step, the data in converted into RDF graph (",(0,n.jsx)(r.strong,{children:"triples"}),"), next the graph is added to the provider, finally all the nodes are added tot the diagram:"]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-tsx",metastring:"live",live:!0,children:'function ExampleRdfProviderProvisionFromJGF() {\r\n  const {defaultLayout} = Reactodia.useWorker(Layouts);\r\n\r\n  const {onMount} = Reactodia.useLoadedWorkspace(async ({context, signal}) => {\r\n    const {model, performLayout} = context;\r\n\r\n    // Example graph data based on JSON graph documentation:\r\n    const jsonGraph = {\r\n      "graph": {\r\n        "nodes": {\r\n          "alice": {\r\n            "label": "Alice",\r\n            "metadata": {\r\n              "type": "Person",\r\n              "birthDate": "1990-01-01"\r\n            }\r\n          },\r\n          "bob": {\r\n            "label": "Bob",\r\n            "metadata": {\r\n              "type": "Person",\r\n              "birthDate": "1990-02-02"\r\n            }\r\n          }\r\n        },\r\n        "edges": [\r\n          {\r\n            "source": "alice",\r\n            "relation": "isFriendOf",\r\n            "target": "bob",\r\n            "metadata": {\r\n              "since": "2000-03-03"\r\n            }\r\n          }\r\n        ]\r\n      }\r\n    } as const;\r\n\r\n    const factory = Reactodia.Rdf.DefaultDataFactory;\r\n    const hasType = factory.namedNode(Reactodia.rdf.type);\r\n    const hasLabel = factory.namedNode(Reactodia.rdfs.label);\r\n\r\n    const triples: Reactodia.Rdf.Quad[] = [];\r\n    for (const [id, node] of Object.entries(jsonGraph.graph.nodes)) {\r\n      const iri = factory.namedNode(`graph:node:${id}`);\r\n      const {type, ...otherProperties} = node.metadata;\r\n      triples.push(\r\n        factory.quad(iri, hasType, factory.namedNode(`graph:type:${type}`)),\r\n        factory.quad(iri, hasLabel, factory.literal(node.label))\r\n      );\r\n      for (const [property, value] of Object.entries(otherProperties)) {\r\n        const propertyIri = factory.namedNode(`graph:property:${property}`);\r\n        triples.push(factory.quad(iri, propertyIri, factory.literal(value)));\r\n      }\r\n    }\r\n\r\n    for (const edge of jsonGraph.graph.edges) {\r\n      const source = factory.namedNode(`graph:node:${edge.source}`);\r\n      const target = factory.namedNode(`graph:node:${edge.target}`);\r\n      const predicate = factory.namedNode(`graph:node:${edge.relation}`);\r\n      const edgeTriple = factory.quad(source, predicate, target);\r\n      triples.push(edgeTriple);\r\n      for (const [property, value] of Object.entries(edge.metadata)) {\r\n        const propertyIri = factory.namedNode(`graph:property:${property}`);\r\n        triples.push(factory.quad(edgeTriple, propertyIri, factory.literal(value)));\r\n      }\r\n    }\r\n\r\n    const dataProvider = new Reactodia.RdfDataProvider();\r\n    dataProvider.addGraph(triples);\r\n\r\n    await model.createNewDiagram({dataProvider, signal});\r\n\r\n    const elementIris: Reactodia.ElementIri[] = [];\r\n    for (const {element} of await dataProvider.lookup({elementTypeId: \'graph:type:Person\'})) {\r\n      elementIris.push(model.createElement(element).iri);\r\n    }\r\n\r\n    await model.requestElementData(elementIris);\r\n    await model.requestLinks();\r\n    await performLayout({signal});\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\'reactodia-live-editor\'>\r\n      <Reactodia.Workspace ref={onMount}\r\n        defaultLayout={defaultLayout}>\r\n        <Reactodia.DefaultWorkspace />\r\n      </Reactodia.Workspace>\r\n    </div>\r\n  );\r\n}\n'})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}}}]);