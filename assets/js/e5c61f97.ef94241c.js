"use strict";(self.webpackChunk_reactodia_reactodia_github_io=self.webpackChunk_reactodia_reactodia_github_io||[]).push([[67999],{84038:(r,e,a)=>{a.r(e),a.d(e,{assets:()=>p,contentTitle:()=>l,default:()=>f,frontMatter:()=>c,metadata:()=>d,toc:()=>u});var t=a(74848),n=a(28453),o=a(92147);a(28774);const s="import * as React from 'react';\r\nimport * as Reactodia from '@reactodia/workspace';\r\nimport * as N3 from 'n3';\r\n\r\nimport { ExampleToolbarMenu } from './ExampleCommon';\r\n\r\nconst Layouts = Reactodia.defineLayoutWorker(() => new Worker(\r\n  new URL('@reactodia/workspace/layout.worker', import.meta.url)\r\n));\r\n\r\ntype TurtleDataSource =\r\n  | { type: 'url'; url: string }\r\n  | { type: 'data'; data: string };\r\n\r\nexport function PlaygroundClassicWorkspace() {\r\n  const {defaultLayout} = Reactodia.useWorker(Layouts);\r\n\r\n  const [dataSource, setDataSource] = React.useState<TurtleDataSource>({\r\n    type: 'url',\r\n    url:\r\n      'https://raw.githubusercontent.com/reactodia/reactodia-workspace/' +\r\n      'master/examples/resources/orgOntology.ttl'\r\n  });\r\n  const [searchCommands] = React.useState(() =>\r\n    new Reactodia.EventSource<Reactodia.UnifiedSearchCommands>\r\n  );\r\n\r\n  const {onMount} = Reactodia.useLoadedWorkspace(async ({context, signal}) => {\r\n    const {model, editor} = context;\r\n    editor.setAuthoringMode(true);\r\n\r\n    let turtleData: string;\r\n    if (dataSource.type === 'url') {\r\n      const response = await fetch(dataSource.url, {signal});\r\n      turtleData = await response.text();\r\n    } else {\r\n      turtleData = dataSource.data;\r\n    }\r\n\r\n    const dataProvider = new Reactodia.RdfDataProvider();\r\n    try {\r\n      dataProvider.addGraph(new N3.Parser().parse(turtleData));\r\n    } catch (err) {\r\n      throw new Error('Error parsing RDF graph data', {cause: err});\r\n    }\r\n\r\n    await model.importLayout({dataProvider, signal});\r\n\r\n    searchCommands.trigger('focus', {sectionKey: 'elementTypes'});\r\n  }, [dataSource]);\r\n\r\n  return (\r\n    <Reactodia.Workspace ref={onMount}\r\n      defaultLayout={defaultLayout}\r\n      typeStyleResolver={Reactodia.SemanticTypeStyles}\r\n      onIriClick={({iri}) => window.open(iri)}>\r\n      <Reactodia.ClassicWorkspace\r\n        canvas={{\r\n          elementTemplateResolver: types => {\r\n            if (types.includes('http://www.w3.org/2002/07/owl#DatatypeProperty')) {\r\n              return Reactodia.ClassicTemplate;\r\n            }\r\n            return undefined;\r\n          },\r\n          linkTemplateResolver: type => {\r\n            if (type === 'http://www.w3.org/2000/01/rdf-schema#subClassOf') {\r\n              return Reactodia.DefaultLinkTemplate;\r\n            }\r\n            return Reactodia.OntologyLinkTemplates(type);\r\n          },\r\n        }}\r\n        toolbar={{\r\n          menu: (\r\n            <>\r\n              <ToolbarActionOpenTurtleGraph onOpen={setDataSource} />\r\n              <ExampleToolbarMenu />\r\n            </>\r\n          )\r\n        }}\r\n        searchCommands={searchCommands}\r\n      />\r\n    </Reactodia.Workspace>\r\n  );\r\n}\r\n\r\nfunction ToolbarActionOpenTurtleGraph(props: {\r\n  onOpen: (dataSource: TurtleDataSource) => void;\r\n}) {\r\n  const {onOpen} = props;\r\n  return (\r\n    <Reactodia.ToolbarActionOpen\r\n      fileAccept='.ttl'\r\n      onSelect={async file => {\r\n        const turtleText = await file.text();\r\n        onOpen({type: 'data', data: turtleText});\r\n      }}>\r\n      Load RDF (Turtle) data\r\n    </Reactodia.ToolbarActionOpen>\r\n  );\r\n}\r\n";var i=a(98576);const c={sidebar_position:7},l="Classic Workspace",d={id:"examples/classic-workspace",title:"Classic Workspace",description:"Example demonstrating classic workspace with",source:"@site/docs/examples/classic-workspace.mdx",sourceDirName:"examples",slug:"/examples/classic-workspace",permalink:"/docs/examples/classic-workspace",draft:!1,unlisted:!1,editUrl:"https://github.com/reactodia/reactodia.github.io/tree/main/docs/examples/classic-workspace.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"docs",previous:{title:"Wikidata Explorer",permalink:"/docs/examples/wikidata"}},p={},u=[];function m(r){const e={a:"a",admonition:"admonition",h1:"h1",p:"p",...(0,n.R)(),...r.components},{Details:a}=e;return a||function(r,e){throw new Error("Expected "+(e?"component":"object")+" `"+r+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.h1,{id:"classic-workspace",children:"Classic Workspace"}),"\n",(0,t.jsxs)(e.p,{children:["Example demonstrating ",(0,t.jsx)(e.a,{href:"/docs/components/workspace",children:"classic workspace"})," with\r\ncollapsible ",(0,t.jsx)(e.a,{href:"/docs/components/layout-panels",children:"layout panels"}),"."]}),"\n",(0,t.jsx)(e.admonition,{type:"tip",children:(0,t.jsx)(e.p,{children:(0,t.jsx)(e.a,{href:"/playground/classic-workspace",children:"\u25b6\ufe0e Open live demo"})})}),"\n","\n","\n",(0,t.jsx)(o.A,{language:"tsx",title:"/src/examples/PlaygroundClassicWorkspace.tsx",showLineNumbers:!0,children:s}),"\n",(0,t.jsxs)(a,{children:[(0,t.jsx)("summary",{children:"ExampleCommon.tsx"}),(0,t.jsx)(o.A,{language:"tsx",title:"/src/examples/ExampleCommon.tsx",showLineNumbers:!0,children:i})]})]})}function f(r={}){const{wrapper:e}={...(0,n.R)(),...r.components};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(m,{...r})}):m(r)}},86871:(r,e,a)=>{a.r(e),a.d(e,{N3:()=>t});var t=a(48640)},71712:(r,e,a)=>{a.r(e),a.d(e,{Reactodia:()=>t});var t=a(19738)},51433:(r,e,a)=>{a.d(e,{A:()=>n});var t=a(96540);const n={React:t,...t,get Reactodia(){const{Reactodia:r}=a(71712);return r},get N3(){const{N3:r}=a(86871);return r},get Layouts(){const{Reactodia:r}=a(71712);return r.defineLayoutWorker((()=>new Worker(new URL(a.p+a.u(86970),a.b))))}}},98576:r=>{r.exports="import * as React from 'react';\r\nimport * as Reactodia from '@reactodia/workspace';\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport function ExampleToolbarMenu() {\r\n  const {model, editor, overlay} = Reactodia.useWorkspace();\r\n  return (\r\n    <>\r\n      <Reactodia.ToolbarActionOpen\r\n        fileAccept='.json'\r\n        onSelect={async file => {\r\n          const preloadedElements = new Map<Reactodia.ElementIri, Reactodia.ElementModel>();\r\n          for (const element of model.elements) {\r\n            for (const data of Reactodia.iterateEntitiesOf(element)) {\r\n              preloadedElements.set(data.id, data);\r\n            }\r\n          }\r\n\r\n          const task = overlay.startTask({title: 'Importing a layout from file'});\r\n          try {\r\n            const json = await file.text();\r\n            const diagramLayout = JSON.parse(json);\r\n            await model.importLayout({\r\n              dataProvider: model.dataProvider,\r\n              diagram: diagramLayout,\r\n              preloadedElements,\r\n              validateLinks: true,\r\n            });\r\n          } catch (err) {\r\n            task.setError(new Error(\r\n              'Failed to load specified file with a diagram layout.',\r\n              {cause: err}\r\n            ));\r\n          } finally {\r\n            task.end();\r\n          }\r\n        }}>\r\n        Open diagram from file\r\n      </Reactodia.ToolbarActionOpen>\r\n      <Reactodia.ToolbarActionSave mode='layout'\r\n        onSelect={() => {\r\n          const diagramLayout = model.exportLayout();\r\n          const layoutString = JSON.stringify(diagramLayout);\r\n          const blob = new Blob([layoutString], {type: 'application/json'});\r\n          const timestamp = new Date().toISOString().replaceAll(/[Z\\s:-]/g, '');\r\n          saveAs(blob, `reactodia-diagram-${timestamp}.json`);\r\n        }}>\r\n        Save diagram to file\r\n      </Reactodia.ToolbarActionSave>\r\n      {editor.inAuthoringMode ? (\r\n        <Reactodia.ToolbarActionSave mode='authoring'\r\n          onSelect={() => {\r\n            const state = editor.authoringState;\r\n            console.log('Authoring state:', state);\r\n            alert('Please check browser console for result');\r\n          }}>\r\n          Persist changes to data\r\n        </Reactodia.ToolbarActionSave>\r\n      ) : null}\r\n      <Reactodia.ToolbarActionClearAll />\r\n      <Reactodia.ToolbarActionExport kind='exportRaster' />\r\n      <Reactodia.ToolbarActionExport kind='exportSvg' />\r\n      <Reactodia.ToolbarActionExport kind='print' />\r\n    </>\r\n  );\r\n}\r\n"}}]);