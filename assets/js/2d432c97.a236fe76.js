"use strict";(self.webpackChunk_reactodia_reactodia_github_io=self.webpackChunk_reactodia_reactodia_github_io||[]).push([[63775],{16593:(o,e,n)=>{n.d(e,{R:()=>c,x:()=>s});var t=n(77810);const r={},a=t.createContext(r);function c(o){const e=t.useContext(a);return t.useMemo((function(){return"function"==typeof o?o(e):{...e,...o}}),[e,o])}function s(o){let e;return e=o.disableParentContext?"function"==typeof o.components?o.components(r):o.components||r:c(o.components),t.createElement(a.Provider,{value:e},o.children)}},88430:(o,e,n)=>{n.r(e),n.d(e,{assets:()=>i,contentTitle:()=>s,default:()=>m,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"components/zoom-control","title":"<ZoomControl />","description":"`` component is a canvas widget to display zoom controls (zoom-in, zoom-out, zoom-to-fit).","source":"@site/docs/components/zoom-control.md","sourceDirName":"components","slug":"/components/zoom-control","permalink":"/docs/components/zoom-control","draft":false,"unlisted":false,"editUrl":"https://github.com/reactodia/reactodia.github.io/tree/main/docs/components/zoom-control.md","tags":[],"version":"current","frontMatter":{"title":"<ZoomControl />"},"sidebar":"docs","previous":{"title":"<Workspace />","permalink":"/docs/components/workspace"},"next":{"title":"Examples","permalink":"/docs/category/examples"}}');var r=n(64922),a=n(16593);const c={title:"<ZoomControl />"},s="Zoom Control",i={},l=[];function d(o){const e={a:"a",code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,a.R)(),...o.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"zoom-control",children:"Zoom Control"})}),"\n",(0,r.jsxs)(e.p,{children:[(0,r.jsx)(e.a,{href:"/docs/api/workspace/functions/ZoomControl",children:(0,r.jsx)(e.code,{children:"<ZoomControl />"})})," component is a ",(0,r.jsx)(e.a,{href:"/docs/components/selection",children:"canvas widget"})," to display zoom controls (zoom-in, zoom-out, zoom-to-fit)."]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",metastring:"live",live:!0,children:"function Example() {\r\n  const {defaultLayout} = Reactodia.useWorker(Layouts);\r\n\r\n  const {onMount} = Reactodia.useLoadedWorkspace(async ({context, signal}) => {\r\n    const {model, view, performLayout} = context;\r\n\r\n    const alice = model.createElement('urn:example:Alice');\r\n    const bob = model.createElement('urn:example:Bob');\r\n    model.createLinks({\r\n      sourceId: alice.iri,\r\n      targetId: bob.iri,\r\n      linkTypeId: 'urn:example:knows',\r\n      properties: {},\r\n    });\r\n\r\n    await performLayout({signal});\r\n  }, []);\r\n\r\n  return (\r\n    <div className='reactodia-live-editor'>\r\n      <Reactodia.Workspace ref={onMount}\r\n        defaultLayout={defaultLayout}>\r\n        <Reactodia.DefaultWorkspace\r\n          menu={null}\r\n          search={null}\r\n          actions={null}\r\n          navigator={null}\r\n          zoomControl={{showPointerModeToggle: true}}\r\n        />\r\n      </Reactodia.Workspace>\r\n    </div>\r\n  );\r\n}\n"})})]})}function m(o={}){const{wrapper:e}={...(0,a.R)(),...o.components};return e?(0,r.jsx)(e,{...o,children:(0,r.jsx)(d,{...o})}):d(o)}}}]);