"use strict";(self.webpackChunk_reactodia_reactodia_github_io=self.webpackChunk_reactodia_reactodia_github_io||[]).push([[61446],{69791:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>r,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>d});var t=a(74848),s=a(28453);const o={title:"Canvas"},r="Canvas Components",c={id:"components/canvas",title:"Canvas",description:"Canvas is a main component to display a scrollable canvas for the diagram with elements, links and additional widgets.",source:"@site/docs/components/canvas.md",sourceDirName:"components",slug:"/components/canvas",permalink:"/docs/components/canvas",draft:!1,unlisted:!1,editUrl:"https://github.com/reactodia/reactodia.github.io/tree/main/docs/components/canvas.md",tags:[],version:"current",frontMatter:{title:"Canvas"},sidebar:"docs",previous:{title:"Components",permalink:"/docs/category/components"},next:{title:"Class Tree",permalink:"/docs/components/class-tree"}},i={},d=[{value:"Hooks",id:"hooks",level:2},{value:"Canvas widgets",id:"canvas-widgets",level:2},{value:"Example: custom viewport widget",id:"example-custom-viewport-widget",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"canvas-components",children:"Canvas Components"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/api/workspace/functions/Canvas",children:"Canvas"})," is a main component to display a scrollable canvas for the diagram with ",(0,t.jsx)(n.a,{href:"/docs/concepts/graph-model",children:"elements"}),", ",(0,t.jsx)(n.a,{href:"/docs/concepts/graph-model",children:"links"})," and additional widgets."]}),"\n",(0,t.jsx)(n.h2,{id:"hooks",children:"Hooks"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.a,{href:"/docs/api/workspace/functions/useCanvas",children:"useCanvas()"})," hook called from a canvas widget, ",(0,t.jsx)(n.a,{href:"/docs/api/workspace/classes/SharedCanvasState#findanycanvas",children:"SharedCanvasState.findAnyCanvas()"})," or ",(0,t.jsx)(n.a,{href:"/docs/api/workspace/classes/SharedCanvasState#findallcanvases",children:"SharedCanvasState.findAllCanvases()"})," methods can be used to get the ",(0,t.jsx)(n.a,{href:"/docs/api/workspace/interfaces/CanvasApi",children:"CanvasApi"})," instance to read or subscribe to the canvas state or perform viewport-related effects."]}),"\n",(0,t.jsx)(n.h2,{id:"canvas-widgets",children:"Canvas widgets"}),"\n",(0,t.jsxs)(n.p,{children:["To define a custom canvas widget, the target React component should be marked by ",(0,t.jsx)(n.a,{href:"/docs/api/workspace/functions/defineCanvasWidget",children:"defineCanvasWidget()"})," function to define its attachment layer."]}),"\n",(0,t.jsx)(n.h3,{id:"example-custom-viewport-widget",children:"Example: custom viewport widget"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",metastring:"live noInline",live:!0,children:"function CustomSelectAllWidget() {\r\n  const {model} = Reactodia.useWorkspace();\r\n  return (\r\n    <div style={{position: 'absolute', right: '10px', top: '10px'}}>\r\n      <button type='button'\r\n        className='reactodia-btn reactodia-btn-default'\r\n        onClick={() => model.setSelection([...model.elements])}>\r\n        Select All\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nReactodia.defineCanvasWidget(\r\n  CustomSelectAllWidget,\r\n  element => ({element, attachment: 'viewport'})\r\n);\r\n\r\nfunction Example() {\r\n  const {defaultLayout} = Reactodia.useWorker(Layouts);\r\n\r\n  const {onMount} = Reactodia.useLoadedWorkspace(async ({context, signal}) => {\r\n    const {model, view, performLayout} = context;\r\n    const dataProvider = new Reactodia.EmptyDataProvider();\r\n    await model.createNewDiagram({dataProvider, signal});\r\n    model.createElement('http://example.com/entity1');\r\n    model.createElement('http://example.com/entity2');\r\n    await performLayout({signal});\r\n  }, []);\r\n\r\n  return (\r\n    <div className='reactodia-live-editor'>\r\n      <Reactodia.Workspace ref={onMount}\r\n        defaultLayout={defaultLayout}>\r\n        <Reactodia.DefaultWorkspace\r\n          search={null}\r\n          canvasWidgets={[<CustomSelectAllWidget key='select-all' />]}\r\n        />\r\n      </Reactodia.Workspace>\r\n    </div>\r\n  );\r\n}\r\n\r\nrender(<Example />);\n"})})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(l,{...e})}):l(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>r,x:()=>c});var t=a(96540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);