"use strict";(self.webpackChunk_reactodia_reactodia_github_io=self.webpackChunk_reactodia_reactodia_github_io||[]).push([[68034],{16593:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var r=n(77810);const o={},i=r.createContext(o);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:t},e.children)}},69114:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"components/form-input","title":"<FormInput* />","description":"Reactodia provides basic built-in components to edit entity or relation properties in a form:","source":"@site/docs/components/form-input.md","sourceDirName":"components","slug":"/components/form-input","permalink":"/docs/components/form-input","draft":false,"unlisted":false,"editUrl":"https://github.com/reactodia/reactodia.github.io/tree/main/docs/components/form-input.md","tags":[],"version":"current","frontMatter":{"title":"<FormInput* />"},"sidebar":"docs","previous":{"title":"<DropOnCanvas />","permalink":"/docs/components/drop-on-canvas"},"next":{"title":"<InstancesSearch />","permalink":"/docs/components/instances-search"}}');var o=n(64922),i=n(16593);const a={title:"<FormInput* />"},s="Form input components",d={},c=[{value:"Example: overriding input to a multiline text field",id:"example-overriding-input-to-a-multiline-text-field",level:3}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.header,{children:(0,o.jsx)(t.h1,{id:"form-input-components",children:"Form input components"})}),"\n",(0,o.jsx)(t.p,{children:"Reactodia provides basic built-in components to edit entity or relation properties in a form:"}),"\n",(0,o.jsxs)(t.table,{children:[(0,o.jsx)(t.thead,{children:(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.th,{children:"Form input component"}),(0,o.jsx)(t.th,{children:"Description"})]})}),(0,o.jsxs)(t.tbody,{children:[(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.a,{href:"/docs/api/workspace/variables/FormInputList",children:(0,o.jsx)(t.code,{children:"<FormInputList />"})})}),(0,o.jsx)(t.td,{children:"Form input to edit multiple values in a list of specified single value inputs."})]}),(0,o.jsxs)(t.tr,{children:[(0,o.jsx)(t.td,{children:(0,o.jsx)(t.a,{href:"/docs/api/workspace/functions/FormInputText",children:(0,o.jsx)(t.code,{children:"<FormInputText />"})})}),(0,o.jsx)(t.td,{children:"Form input to edit a single value as a plain string with an optional language."})]})]})]}),"\n",(0,o.jsx)(t.admonition,{type:"warning",children:(0,o.jsxs)(t.p,{children:["Currently form input components are considered ",(0,o.jsx)(t.strong,{children:"unstable"})," so there might be breaking changes in their API in the future."]})}),"\n",(0,o.jsx)(t.h3,{id:"example-overriding-input-to-a-multiline-text-field",children:"Example: overriding input to a multiline text field"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-tsx",metastring:"live noInline",live:!0,children:"function Example() {\r\n  const GRAPH_DATA = 'https://reactodia.github.io/resources/orgOntology.ttl';\r\n\r\n  const {defaultLayout} = Reactodia.useWorker(Layouts);\r\n\r\n  const {onMount} = Reactodia.useLoadedWorkspace(async ({context, signal}) => {\r\n    const {model, editor, getCommandBus, performLayout} = context;\r\n    const response = await fetch(GRAPH_DATA, {signal});\r\n    const graphData = new N3.Parser().parse(await response.text());\r\n    const dataProvider = new Reactodia.RdfDataProvider({acceptBlankNodes: false});\r\n    dataProvider.addGraph(graphData);\r\n    await model.createNewDiagram({dataProvider, signal});\r\n    const element = model.createElement('http://www.w3.org/ns/org#Organization');\r\n    await Promise.all([\r\n        model.requestElementData([element.iri]),\r\n        model.requestLinks(),\r\n    ]);\r\n    editor.setAuthoringMode(true);\r\n    getCommandBus(Reactodia.VisualAuthoringTopic)\r\n        .trigger('editEntity', {target: element});\r\n  }, []);\r\n\r\n  const RDF_COMMENT = 'http://www.w3.org/2000/01/rdf-schema#comment';\r\n\r\n  const [metadataProvider] = React.useState(() => new Reactodia.BaseMetadataProvider({\r\n    canModifyEntity: () => ({canEdit: true}),\r\n    getEntityShape: types => ({\r\n      properties: new Map([\r\n        [Reactodia.rdfs.label, {valueShape: {termType: 'Literal'}}],\r\n        [RDF_COMMENT, {valueShape: {termType: 'Literal'}}],\r\n      ])\r\n    }),\r\n  }));\r\n\r\n  return (\r\n    <div className='reactodia-live-editor'>\r\n      <Reactodia.Workspace ref={onMount}\r\n        metadataProvider={metadataProvider}\r\n        defaultLayout={defaultLayout}>\r\n          <Reactodia.DefaultWorkspace\r\n            search={null}\r\n            visualAuthoring={{\r\n              inputResolver: (property, inputProps) =>\r\n                property === RDF_COMMENT\r\n                  ? <Reactodia.FormInputList {...inputProps} valueInput={MultilineTextInput} />\r\n                  : undefined,\r\n            }}\r\n          />\r\n      </Reactodia.Workspace>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MultilineTextInput(props: Reactodia.FormInputSingleProps) {\r\n  return <Reactodia.FormInputText {...props} multiline />;\r\n}\r\n\r\nrender(<Example />);\n"})})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}}}]);