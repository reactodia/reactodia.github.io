"use strict";(self.webpackChunk_reactodia_reactodia_github_io=self.webpackChunk_reactodia_reactodia_github_io||[]).push([[86430],{16593:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var i=n(77810);const r={},a=i.createContext(r);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:t},e.children)}},99673:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"api/workspace/type-aliases/ElementTypeIri","title":"Type Alias: ElementTypeIri","description":"ElementTypeIri = string & object","source":"@site/docs/api/workspace/type-aliases/ElementTypeIri.md","sourceDirName":"api/workspace/type-aliases","slug":"/api/workspace/type-aliases/ElementTypeIri","permalink":"/docs/api/workspace/type-aliases/ElementTypeIri","draft":false,"unlisted":false,"editUrl":"https://github.com/reactodia/reactodia.github.io/tree/main/docs/api/workspace/type-aliases/ElementTypeIri.md","tags":[],"version":"current","frontMatter":{},"sidebar":"api","previous":{"title":"ElementTemplateResolver","permalink":"/docs/api/workspace/type-aliases/ElementTemplateResolver"},"next":{"title":"FetchOperation","permalink":"/docs/api/workspace/type-aliases/FetchOperation"}}');var r=n(64922),a=n(16593);const s={},o="Type Alias: ElementTypeIri",c={},l=[{value:"Type declaration",id:"type-declaration",level:2},{value:"__iriBrand?",id:"__iribrand",level:3}];function d(e){const t={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"type-alias-elementtypeiri",children:"Type Alias: ElementTypeIri"})}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"ElementTypeIri"})," = ",(0,r.jsx)(t.code,{children:"string"})," & ",(0,r.jsx)(t.code,{children:"object"})]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["Defined in: ",(0,r.jsx)(t.a,{href:"https://github.com/AlexeyMz/reactodia-workspace/blob/356ab81b3f74463db55a5118aa19d0298343db5f/src/data/model.ts#L14",children:"data/model.ts:14"})]}),"\n",(0,r.jsx)(t.p,{children:"Nominal (branded) type for element (graph node) type IRI, i.e. unique ID string."}),"\n",(0,r.jsx)(t.h2,{id:"type-declaration",children:"Type declaration"}),"\n",(0,r.jsx)(t.h3,{id:"__iribrand",children:"__iriBrand?"}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"readonly"})," ",(0,r.jsx)(t.code,{children:"optional"})," ",(0,r.jsx)(t.strong,{children:"__iriBrand"}),": ",(0,r.jsx)(t.code,{children:'"elementType"'})]}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);