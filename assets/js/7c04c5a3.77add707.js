"use strict";(self.webpackChunk_reactodia_reactodia_github_io=self.webpackChunk_reactodia_reactodia_github_io||[]).push([[64409],{30692:(e,o,r)=>{r.r(o),r.d(o,{assets:()=>d,contentTitle:()=>n,default:()=>h,frontMatter:()=>t,metadata:()=>i,toc:()=>l});var s=r(64922),a=r(16593);const t={sidebar_position:8},n="Overlay dialogs and tasks",i={id:"concepts/canvas-overlays",title:"Overlay dialogs and tasks",description:"Canvas dialogs",source:"@site/docs/concepts/canvas-overlays.md",sourceDirName:"concepts",slug:"/concepts/canvas-overlays",permalink:"/docs/concepts/canvas-overlays",draft:!1,unlisted:!1,editUrl:"https://github.com/reactodia/reactodia.github.io/tree/main/docs/concepts/canvas-overlays.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"docs",previous:{title:"Graph Layout",permalink:"/docs/concepts/graph-layout"},next:{title:"Graph Authoring",permalink:"/docs/concepts/graph-authoring"}},d={},l=[{value:"Canvas dialogs",id:"canvas-dialogs",level:2},{value:"Showing a dialog",id:"showing-a-dialog",level:3},{value:"Example: a modal dialog over the viewport",id:"example-a-modal-dialog-over-the-viewport",level:3},{value:"Dialog styles",id:"dialog-styles",level:3},{value:"Overlay tasks",id:"overlay-tasks",level:2}];function c(e){const o={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(o.h1,{id:"overlay-dialogs-and-tasks",children:"Overlay dialogs and tasks"}),"\n",(0,s.jsx)(o.h2,{id:"canvas-dialogs",children:"Canvas dialogs"}),"\n",(0,s.jsxs)(o.p,{children:["It is possible to show a dialog either attached to target ",(0,s.jsx)(o.a,{href:"/docs/concepts/graph-model",children:"element"}),", ",(0,s.jsx)(o.a,{href:"/docs/concepts/graph-model",children:"link"})," or as a modal over the canvas viewport itself."]}),"\n",(0,s.jsx)(o.h3,{id:"showing-a-dialog",children:"Showing a dialog"}),"\n",(0,s.jsxs)(o.p,{children:["The following methods and properties from ",(0,s.jsx)(o.a,{href:"/docs/api/workspace/classes/OverlayController",children:(0,s.jsx)(o.code,{children:"OverlayController"})})," (accessible from ",(0,s.jsx)(o.a,{href:"/docs/concepts/workspace-context",children:"workspace context"}),") provide means to interact with the dialogs:"]}),"\n",(0,s.jsxs)(o.table,{children:[(0,s.jsx)(o.thead,{children:(0,s.jsxs)(o.tr,{children:[(0,s.jsx)(o.th,{children:"Method or property"}),(0,s.jsx)(o.th,{children:"Description"})]})}),(0,s.jsxs)(o.tbody,{children:[(0,s.jsxs)(o.tr,{children:[(0,s.jsxs)(o.td,{children:[(0,s.jsx)(o.a,{href:"/docs/api/workspace/classes/OverlayController#showdialog",children:(0,s.jsx)(o.code,{children:"showDialog()"})})," method"]}),(0,s.jsx)(o.td,{children:"Opens a dialog with the specified style and content."})]}),(0,s.jsxs)(o.tr,{children:[(0,s.jsxs)(o.td,{children:[(0,s.jsx)(o.a,{href:"/docs/api/workspace/classes/OverlayController#hidedialog",children:(0,s.jsx)(o.code,{children:"hideDialog()"})})," method"]}),(0,s.jsx)(o.td,{children:"Hides a currently open dialog."})]}),(0,s.jsxs)(o.tr,{children:[(0,s.jsxs)(o.td,{children:[(0,s.jsx)(o.a,{href:"/docs/api/workspace/classes/OverlayController#openeddialog",children:(0,s.jsx)(o.code,{children:"openedDialog"})})," property"]}),(0,s.jsxs)(o.td,{children:["Can be used to read the state of the currently open dialog. ",(0,s.jsx)("br",{})," Has corresponding ",(0,s.jsx)(o.a,{href:"/docs/api/workspace/interfaces/OverlayControllerEvents",children:(0,s.jsx)(o.code,{children:"changeOpenedDialog"})})," event."]})]})]})]}),"\n",(0,s.jsx)(o.h3,{id:"example-a-modal-dialog-over-the-viewport",children:"Example: a modal dialog over the viewport"}),"\n",(0,s.jsx)(o.pre,{children:(0,s.jsx)(o.code,{className:"language-tsx",metastring:"live",live:!0,children:"function Example() {\r\n  const {defaultLayout} = Reactodia.useWorker(Layouts);\r\n\r\n  const {onMount} = Reactodia.useLoadedWorkspace(async ({context, signal}) => {\r\n      const {overlay} = context;\r\n      overlay.showDialog({\r\n        style: {\r\n          caption: 'Custom modal dialog',\r\n        },\r\n        content: (\r\n          <div className='reactodia-form'>\r\n            <div className='reactodia-form__body'>\r\n              <div>Custom dialog content</div>\r\n            </div>\r\n            <div className='reactodia-form__controls'>\r\n              <button className='reactodia-btn reactodia-btn-primary'\r\n                type='button'\r\n                onClick={() => overlay.hideDialog()}>\r\n                Close\r\n              </button>\r\n            </div>\r\n          </div>\r\n        ),\r\n      });\r\n  }, []);\r\n\r\n  return (\r\n    <div className='reactodia-live-editor'>\r\n      <Reactodia.Workspace ref={onMount}\r\n        defaultLayout={defaultLayout}>\r\n        <Reactodia.DefaultWorkspace />\r\n      </Reactodia.Workspace>\r\n    </div>\r\n  );\r\n}\n"})}),"\n",(0,s.jsx)(o.h3,{id:"dialog-styles",children:"Dialog styles"}),"\n",(0,s.jsxs)(o.p,{children:["The component look can be customized using the following CSS properties (see ",(0,s.jsx)(o.a,{href:"/docs/concepts/design-system",children:"design system"})," for more information):"]}),"\n",(0,s.jsxs)(o.table,{children:[(0,s.jsx)(o.thead,{children:(0,s.jsxs)(o.tr,{children:[(0,s.jsx)(o.th,{children:"Property"}),(0,s.jsx)(o.th,{children:"Description"})]})}),(0,s.jsxs)(o.tbody,{children:[(0,s.jsxs)(o.tr,{children:[(0,s.jsx)(o.td,{children:(0,s.jsx)(o.code,{children:"--reactodia-dialog-border-color"})}),(0,s.jsx)(o.td,{children:"Border color for the dialog (uses the base border color if not set)."})]}),(0,s.jsxs)(o.tr,{children:[(0,s.jsx)(o.td,{children:(0,s.jsx)(o.code,{children:"--reactodia-dialog-border-radius"})}),(0,s.jsx)(o.td,{children:"Border radius for the dialog (uses the base border radius if not set)."})]}),(0,s.jsxs)(o.tr,{children:[(0,s.jsx)(o.td,{children:(0,s.jsx)(o.code,{children:"--reactodia-dialog-border-width"})}),(0,s.jsx)(o.td,{children:"Border width for the dialog (uses the base border width if not set)."})]})]})]}),"\n",(0,s.jsx)(o.h2,{id:"overlay-tasks",children:"Overlay tasks"}),"\n",(0,s.jsxs)(o.admonition,{type:"info",children:[(0,s.jsx)(o.p,{children:"This section is incomplete, please look at the reference API documentation instead:"}),(0,s.jsxs)(o.ul,{children:["\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.a,{href:"/docs/api/workspace/classes/OverlayController#starttask",children:(0,s.jsx)(o.code,{children:"OverlayController.startTask()"})})}),"\n",(0,s.jsx)(o.li,{children:(0,s.jsx)(o.a,{href:"/docs/api/workspace/classes/OverlayController#showspinnerwhile",children:(0,s.jsx)(o.code,{children:"OverlayController.showSpinnerWhile()"})})}),"\n"]})]})]})}function h(e={}){const{wrapper:o}={...(0,a.R)(),...e.components};return o?(0,s.jsx)(o,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},16593:(e,o,r)=>{r.d(o,{R:()=>n,x:()=>i});var s=r(77810);const a={},t=s.createContext(a);function n(e){const o=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(o):{...o,...e}}),[o,e])}function i(e){let o;return o=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:n(e.components),s.createElement(t.Provider,{value:o},e.children)}}}]);