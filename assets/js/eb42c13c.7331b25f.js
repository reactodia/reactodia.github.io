"use strict";(self.webpackChunk_reactodia_reactodia_github_io=self.webpackChunk_reactodia_reactodia_github_io||[]).push([[61334],{11340:(e,r,t)=>{t.r(r),t.d(r,{Reactodia:()=>n});var n=t(96333)},50245:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>m,contentTitle:()=>d,default:()=>g,frontMatter:()=>c,metadata:()=>n,toc:()=>p});const n=JSON.parse('{"id":"examples/style-customization","title":"Style Customization","description":"Example demonstrating type style and canvas style customizations.","source":"@site/docs/examples/style-customization.mdx","sourceDirName":"examples","slug":"/examples/style-customization","permalink":"/docs/examples/style-customization","draft":false,"unlisted":false,"editUrl":"https://github.com/reactodia/reactodia.github.io/tree/main/docs/examples/style-customization.mdx","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"sidebar_position":4},"sidebar":"docs","previous":{"title":"RDF Explorer","permalink":"/docs/examples/rdf-explorer"},"next":{"title":"Graph Authoring","permalink":"/docs/examples/graph-authoring"}}');var o=t(64922),a=t(16593),i=t(46720);t(43946);const s="import * as React from 'react';\r\nimport * as Reactodia from '@reactodia/workspace';\r\nimport * as N3 from 'n3';\r\n\r\nconst BOOK_ICON: string = require('!!url-loader!@vscode/codicons/src/icons/book.svg').default;\r\nconst CERTIFICATE_ICON: string = require('!!url-loader!@vscode/codicons/src/icons/symbol-class.svg').default;\r\nconst COG_ICON: string = require('!!url-loader!@vscode/codicons/src/icons/gear.svg').default;\r\n\r\nimport { ExampleToolbarMenu } from './ExampleCommon';\r\n\r\nconst Layouts = Reactodia.defineLayoutWorker(() => new Worker(\r\n  new URL('@reactodia/workspace/layout.worker', import.meta.url)\r\n));\r\n\r\nexport function PlaygroundStyleCustomization() {\r\n  const {defaultLayout} = Reactodia.useWorker(Layouts);\r\n\r\n  const {onMount} = Reactodia.useLoadedWorkspace(async ({context, signal}) => {\r\n    const {model} = context;\r\n\r\n    const turtleData = await (await fetch(\r\n      'https://reactodia.github.io/resources/orgOntology.ttl',\r\n      {signal}\r\n    )).text();\r\n\r\n    const dataProvider = new Reactodia.RdfDataProvider();\r\n    dataProvider.addGraph(new N3.Parser().parse(turtleData));\r\n\r\n    const diagram = await (await fetch(\r\n      '/resources/styleCustomizationDiagram.json',\r\n      {signal}\r\n    )).json();\r\n\r\n    await model.importLayout({\r\n      diagram,\r\n      dataProvider: dataProvider,\r\n      validateLinks: true,\r\n      signal,\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <Reactodia.Workspace ref={onMount}\r\n      defaultLayout={defaultLayout}\r\n      typeStyleResolver={types => {\r\n        if (types.includes('http://www.w3.org/2000/01/rdf-schema#Class')) {\r\n          return {icon: CERTIFICATE_ICON, iconMonochrome: true};\r\n        } else if (types.includes('http://www.w3.org/2002/07/owl#Class')) {\r\n          return {icon: CERTIFICATE_ICON, iconMonochrome: true};\r\n        } else if (types.includes('http://www.w3.org/2002/07/owl#ObjectProperty')) {\r\n          return {icon: COG_ICON, iconMonochrome: true};\r\n        } else if (types.includes('http://www.w3.org/2002/07/owl#DatatypeProperty')) {\r\n          return {color: '#00b9f2'};\r\n        } else {\r\n          return undefined;\r\n        }\r\n      }}>\r\n      <Reactodia.DefaultWorkspace\r\n        canvas={{\r\n          elementTemplateResolver: (types, element) => {\r\n            if (\r\n              types.includes('http://www.w3.org/2002/07/owl#DatatypeProperty') ||\r\n              types.includes('http://www.w3.org/2002/07/owl#AnnotationProperty')\r\n            ) {\r\n              return PropertyTemplate;\r\n            }\r\n            return undefined;\r\n          },\r\n          linkTemplateResolver: type => DoubleArrowLinkTemplate,\r\n        }}\r\n        canvasWidgets={[\r\n          <BookDecorations key='book-decorations' />\r\n        ]}\r\n        menu={<ExampleToolbarMenu />}\r\n      />\r\n    </Reactodia.Workspace>\r\n  );\r\n}\r\n\r\n// Custom element template\r\nconst PropertyTemplate: Reactodia.ElementTemplate = {\r\n  ...Reactodia.RoundTemplate,\r\n  renderElement: props => (\r\n    <>\r\n      <Reactodia.RoundEntity {...props} />\r\n      {props.element instanceof Reactodia.EntityElement\r\n        ? <ElementLabelDecoration target={props.element} />\r\n        : null}\r\n    </>\r\n  ),\r\n};\r\n\r\n// Internal element decoration, i.e. rendered inside the element template.\r\nfunction ElementLabelDecoration(props: { target: Reactodia.EntityElement }) {\r\n  const {target} = props;\r\n  const {model} = Reactodia.useWorkspace();\r\n  const data = Reactodia.useObservedProperty(target.events, 'changeData', () => target.data);\r\n  const label = model.locale.formatEntityLabel(data, model.language);\r\n  return (\r\n    <Reactodia.ElementDecoration target={target}>\r\n      <div data-element-id={target.id}\r\n        style={{\r\n          position: 'absolute',\r\n          bottom: 0,\r\n          left: '50%',\r\n          transform: 'translate(-50%,100%)',\r\n          color: 'cornflowerblue',\r\n          cursor: 'move',\r\n        }}>\r\n        {label}\r\n      </div>\r\n    </Reactodia.ElementDecoration>\r\n  );\r\n}\r\n\r\nfunction BookDecorations() {\r\n  const {model} = Reactodia.useCanvas();\r\n  return model.elements\r\n    .filter(element => element instanceof Reactodia.EntityElement)\r\n    .map(element => <BookDecoration key={element.id} target={element} />);\r\n}\r\n\r\nReactodia.defineCanvasWidget(BookDecorations, element => ({element, attachment: 'viewport'}));\r\n\r\n// External element decoration, i.e. rendered outside the element template\r\nfunction BookDecoration(props: { target: Reactodia.EntityElement }) {\r\n  const {target} = props;\r\n\r\n  const data = Reactodia.useObservedProperty(\r\n    target.events,\r\n    'changeData',\r\n    () => target.data.types.includes('http://www.w3.org/2002/07/owl#Class') ? target.data : null\r\n  );\r\n\r\n  return data ? (\r\n    <Reactodia.ElementDecoration target={target}>\r\n      <div\r\n        style={{\r\n          mask: `url(${BOOK_ICON}) 0px 0px / contain no-repeat`,\r\n          backgroundColor: 'orange',\r\n          height: '36px',\r\n          width: '36px',\r\n          position: 'absolute',\r\n          top: '50%',\r\n          left: '-10px',\r\n          transform: 'translate(-100%,-50%)',\r\n        }}\r\n      />\r\n    </Reactodia.ElementDecoration>\r\n  ) : null;\r\n}\r\n\r\n// Custom link template\r\nconst DoubleArrowLinkTemplate: Reactodia.LinkTemplate = {\r\n  markerSource: {\r\n    fill: '#4b4a67',\r\n    stroke: '#4b4a67',\r\n    d: 'M0,3a3,3 0 1,0 6,0a3,3 0 1,0 -6,0',\r\n    width: 6,\r\n    height: 6,\r\n  },\r\n  markerTarget: {\r\n    fill: '#4b4a67',\r\n    stroke: '#4b4a67',\r\n    d: 'm 20,5.88 -10.3,-5.95 0,5.6 -9.7,-5.6 0,11.82 9.7,-5.53 0,5.6 z',\r\n    width: 20,\r\n    height: 12,\r\n  },\r\n  renderLink: props => (\r\n    <Reactodia.DefaultLink {...props}\r\n      pathProps={{stroke: '#747da8', strokeWidth: 2}}\r\n      primaryLabelProps={{\r\n        style: {color: '#747da8'},\r\n      }}\r\n    />\r\n  ),\r\n};\r\n";var l=t(98576);const c={sidebar_position:4},d="Style Customization",m={},p=[];function u(e){const r={a:"a",admonition:"admonition",h1:"h1",header:"header",p:"p",...(0,a.R)(),...e.components},{Details:t}=r;return t||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"style-customization",children:"Style Customization"})}),"\n",(0,o.jsxs)(r.p,{children:["Example demonstrating ",(0,o.jsx)(r.a,{href:"/docs/components/workspace#customize-type-styles",children:"type style"})," and ",(0,o.jsx)(r.a,{href:"/docs/components/canvas#customization",children:"canvas style"})," customizations."]}),"\n",(0,o.jsx)(r.admonition,{type:"info",children:(0,o.jsx)(r.p,{children:(0,o.jsx)(r.a,{href:"/playground/style-customization",children:"\u25b6\ufe0e Open live demo"})})}),"\n","\n",(0,o.jsx)(i.A,{language:"tsx",title:"/src/examples/PlaygroundStyleCustomization.tsx",showLineNumbers:!0,children:s}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"ExampleCommon.tsx"}),(0,o.jsx)(i.A,{language:"tsx",title:"/src/examples/ExampleCommon.tsx",showLineNumbers:!0,children:l})]})]})}function g(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},64685:(e,r,t)=>{t.d(r,{A:()=>o});var n=t(77810);const o={React:n,...n,get Reactodia(){const{Reactodia:e}=t(11340);return e},get N3(){const{N3:e}=t(90211);return e},get Layouts(){const{Reactodia:e}=t(11340);return e.defineLayoutWorker((()=>new Worker(new URL(t.p+t.u(99682),t.b))))}}},90211:(e,r,t)=>{t.r(r),t.d(r,{N3:()=>n});var n=t(56881)},98576:e=>{e.exports="import * as React from 'react';\r\nimport * as Reactodia from '@reactodia/workspace';\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport function ExampleToolbarMenu() {\r\n  const {model, editor, overlay} = Reactodia.useWorkspace();\r\n  return (\r\n    <>\r\n      <Reactodia.ToolbarActionOpen\r\n        hotkey='Mod+O'\r\n        fileAccept='.json'\r\n        onSelect={async file => {\r\n          const preloadedElements = new Map<Reactodia.ElementIri, Reactodia.ElementModel>();\r\n          for (const element of model.elements) {\r\n            for (const data of Reactodia.iterateEntitiesOf(element)) {\r\n              preloadedElements.set(data.id, data);\r\n            }\r\n          }\r\n\r\n          const task = overlay.startTask({title: 'Importing a layout from file'});\r\n          try {\r\n            const json = await file.text();\r\n            const diagramLayout = JSON.parse(json);\r\n            await model.importLayout({\r\n              dataProvider: model.dataProvider,\r\n              diagram: diagramLayout,\r\n              preloadedElements,\r\n              validateLinks: true,\r\n            });\r\n          } catch (err) {\r\n            task.setError(new Error(\r\n              'Failed to load specified file with a diagram layout.',\r\n              {cause: err}\r\n            ));\r\n          } finally {\r\n            task.end();\r\n          }\r\n        }}>\r\n        Open diagram from file\r\n      </Reactodia.ToolbarActionOpen>\r\n      <Reactodia.ToolbarActionSave mode='layout'\r\n        hotkey='Mod+S'\r\n        onSelect={() => {\r\n          const diagramLayout = model.exportLayout();\r\n          const layoutString = JSON.stringify(diagramLayout);\r\n          const blob = new Blob([layoutString], {type: 'application/json'});\r\n          const timestamp = new Date().toISOString().replaceAll(/[Z\\s:-]/g, '');\r\n          saveAs(blob, `reactodia-diagram-${timestamp}.json`);\r\n        }}>\r\n        Save diagram to file\r\n      </Reactodia.ToolbarActionSave>\r\n      {editor.inAuthoringMode ? (\r\n        <Reactodia.ToolbarActionSave mode='authoring'\r\n          onSelect={() => {\r\n            const state = editor.authoringState;\r\n            console.log('Authoring state:', state);\r\n            alert('Please check browser console for result');\r\n          }}>\r\n          Persist changes to data\r\n        </Reactodia.ToolbarActionSave>\r\n      ) : null}\r\n      <Reactodia.ToolbarActionClearAll />\r\n      <Reactodia.ToolbarActionExport kind='exportRaster' />\r\n      <Reactodia.ToolbarActionExport kind='exportSvg' />\r\n      <Reactodia.ToolbarActionExport kind='print' hotkey='Mod+P' />\r\n    </>\r\n  );\r\n}\r\n"}}]);