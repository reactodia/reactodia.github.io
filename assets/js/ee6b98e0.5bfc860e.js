"use strict";(self.webpackChunk_reactodia_reactodia_github_io=self.webpackChunk_reactodia_reactodia_github_io||[]).push([[97221],{11340:(n,r,e)=>{e.r(r),e.d(r,{Reactodia:()=>t});var t=e(96333)},64685:(n,r,e)=>{e.d(r,{A:()=>o});var t=e(77810);const o={React:t,...t,get Reactodia(){const{Reactodia:n}=e(11340);return n},get N3(){const{N3:n}=e(90211);return n},get Layouts(){const{Reactodia:n}=e(11340);return n.defineLayoutWorker((()=>new Worker(new URL(e.p+e.u(99682),e.b))))}}},85042:(n,r,e)=>{e.r(r),e.d(r,{assets:()=>m,contentTitle:()=>u,default:()=>S,frontMatter:()=>p,metadata:()=>t,toc:()=>g});const t=JSON.parse('{"id":"examples/sparql","title":"SPARQL Navigator","description":"Example demonstrating graph data exploration using a generic SPARQL endpoint.","source":"@site/docs/examples/sparql.mdx","sourceDirName":"examples","slug":"/examples/sparql","permalink":"/docs/examples/sparql","draft":false,"unlisted":false,"editUrl":"https://github.com/reactodia/reactodia.github.io/tree/main/docs/examples/sparql.mdx","tags":[],"version":"current","sidebarPosition":6,"frontMatter":{"sidebar_position":6},"sidebar":"docs","previous":{"title":"Graph Authoring","permalink":"/docs/examples/graph-authoring"},"next":{"title":"Stress Test","permalink":"/docs/examples/stress-test"}}');var o=e(64922),a=e(16593),i=e(46720);e(43946);const s="import * as React from 'react';\r\nimport * as Reactodia from '@reactodia/workspace';\r\n\r\nimport { ExampleToolbarMenu } from './ExampleCommon';\r\nimport { getHashQuery, setHashQueryParam } from './HashQuery';\r\nimport {\r\n  SparqlConnectionAction, SparqlConnectionSettings, showConnectionDialog,\r\n} from './SparqlConnection';\r\n\r\nconst Layouts = Reactodia.defineLayoutWorker(() => new Worker(\r\n  new URL('@reactodia/workspace/layout.worker', import.meta.url)\r\n));\r\n\r\nexport function PlaygroundSparql() {\r\n  const {defaultLayout} = Reactodia.useWorker(Layouts);\r\n\r\n  const [connectionSettings, setConnectionSettings] = React.useState(\r\n    (): SparqlConnectionSettings | undefined => {\r\n      const params = getHashQuery();\r\n      const endpointUrl = params?.get('sparql-endpoint');\r\n      return endpointUrl ? {endpointUrl} : undefined;\r\n    }\r\n  );\r\n  const applyConnectionSettings = (settings: SparqlConnectionSettings) => {\r\n    setHashQueryParam('sparql-endpoint', settings.endpointUrl);\r\n    setConnectionSettings(settings);\r\n  };\r\n\r\n  const {onMount} = Reactodia.useLoadedWorkspace(async ({context, signal}) => {\r\n    const {model, getCommandBus} = context;\r\n\r\n    if (connectionSettings) {\r\n      const dataProvider = new Reactodia.SparqlDataProvider({\r\n        endpointUrl: connectionSettings.endpointUrl,\r\n        imagePropertyUris: ['http://xmlns.com/foaf/0.1/img'],\r\n      }, Reactodia.OwlStatsSettings);\r\n\r\n      model.importLayout({\r\n        dataProvider: dataProvider,\r\n        validateLinks: true,\r\n        signal,\r\n      });\r\n\r\n      getCommandBus(Reactodia.UnifiedSearchTopic)\r\n        .trigger('focus', {sectionKey: 'elementTypes'});\r\n    } else {\r\n      showConnectionDialog(connectionSettings, applyConnectionSettings, context);\r\n    }\r\n  }, [connectionSettings]);\r\n\r\n  return (\r\n    <Reactodia.Workspace ref={onMount}\r\n      defaultLayout={defaultLayout}>\r\n      <Reactodia.DefaultWorkspace\r\n        menu={<ExampleToolbarMenu />}\r\n        canvasWidgets={[\r\n          <Reactodia.Toolbar key='sparql-settings'\r\n            dock='sw'\r\n            dockOffsetY={40}>\r\n            <SparqlConnectionAction settings={connectionSettings}\r\n                applySettings={applyConnectionSettings}\r\n            />\r\n          </Reactodia.Toolbar>\r\n        ]}\r\n        languages={[\r\n          {code: 'de', label: 'Deutsch'},\r\n          {code: 'en', label: 'English'},\r\n          {code: 'es', label: 'Espa\xf1ol'},\r\n          {code: 'fr', label: 'Fran\xe7ais'},\r\n          {code: 'hi', label: '\u0939\u093f\u0928\u094d\u0926\u0940'},\r\n          {code: 'it', label: 'Italiano'},\r\n          {code: 'ja', label: '\u65e5\u672c\u8a9e'},\r\n          {code: 'pt', label: 'portugu\xeas'},\r\n          {code: 'ru', label: '\u0420\u0443\u0441\u0441\u043a\u0438\u0439'},\r\n          {code: 'zh', label: '\u6c49\u8bed'},\r\n        ]}\r\n      />\r\n    </Reactodia.Workspace>\r\n  );\r\n}\r\n";var l=e(98576);const c="export function getHashQuery(): URLSearchParams | undefined {\r\n  const hash = window.location.hash;\r\n  if (hash.length > 1) {\r\n    try {\r\n      const hashQuery = new URLSearchParams(hash.substring(1));\r\n      return hashQuery;\r\n    } catch (e) {\r\n      /* ignore */\r\n    }\r\n  }\r\n  return undefined;\r\n}\r\n\r\nexport function setHashQueryParam(paramName: string, paramValue: string | null): void {\r\n  const hashQuery = getHashQuery() ?? new URLSearchParams();\r\n  if (paramValue) {\r\n    hashQuery.set(paramName, paramValue);\r\n  } else {\r\n    hashQuery.delete(paramName);\r\n  }\r\n  window.location.hash = hashQuery.toString();\r\n}\r\n",d="import * as React from 'react';\r\nimport * as Reactodia from '@reactodia/workspace';\r\n\r\nexport interface SparqlConnectionSettings {\r\n  readonly endpointUrl: string;\r\n}\r\n\r\nexport function SparqlConnectionAction(props: {\r\n  settings: SparqlConnectionSettings | undefined;\r\n  applySettings: (settings: SparqlConnectionSettings) => void;\r\n}) {\r\n  const {settings, applySettings} = props;\r\n  if (!settings) {\r\n    return null;\r\n  }\r\n  const context = Reactodia.useWorkspace();\r\n  const endpointUrl = URL.canParse(settings.endpointUrl)\r\n    ? new URL(settings.endpointUrl) : undefined;\r\n  return (\r\n    <Reactodia.ToolbarAction\r\n      onSelect={() => showConnectionDialog(settings, applySettings, context)}>\r\n      SPARQL endpoint: <code>{endpointUrl?.host ?? settings.endpointUrl}</code>\r\n    </Reactodia.ToolbarAction>\r\n  );\r\n}\r\n\r\nexport function showConnectionDialog(\r\n  initialSettings: SparqlConnectionSettings | undefined,\r\n  applySettings: (settings: SparqlConnectionSettings) => void,\r\n  context: Reactodia.WorkspaceContext\r\n): void {\r\n  const { overlay } = context;\r\n  overlay.showDialog({\r\n    style: {\r\n      caption: 'SPARQL connection settings',\r\n      defaultSize: {width: 400, height: 250},\r\n      resizableBy: 'x',\r\n      closable: Boolean(initialSettings),\r\n    },\r\n    content: (\r\n      <SparqlConnectionForm\r\n        initialSettings={initialSettings}\r\n        onSubmit={settings => {\r\n          overlay.hideDialog();\r\n          applySettings(settings);\r\n        }}\r\n      />\r\n    ),\r\n  });\r\n}\r\n\r\nexport function SparqlConnectionForm(props: {\r\n  initialSettings: SparqlConnectionSettings | undefined;\r\n  onSubmit: (settings: SparqlConnectionSettings) => void;\r\n}) {\r\n  const {initialSettings, onSubmit} = props;\r\n  const [settings, setSettings] = React.useState<SparqlConnectionSettings>(\r\n    initialSettings ?? {endpointUrl: ''}\r\n  );\r\n  const isValidEndpoint = settings.endpointUrl.length === 0 || URL.canParse(settings.endpointUrl);\r\n  const canSubmit = settings.endpointUrl.length > 0 && isValidEndpoint;\r\n  return (\r\n    <div className='reactodia-form'>\r\n      <div className='reactodia-form__body'>\r\n        <div className='reactodia-form__control-row'>\r\n          <label htmlFor='sparqlEndpointUrl'>Endpoint URL</label>\r\n          <input id='sparqlEndpointUrl'\r\n            type='input'\r\n            className='reactodia-form-control'\r\n            placeholder='SPARQL endpoint URL'\r\n            autoFocus\r\n            value={settings.endpointUrl}\r\n            onChange={e => {\r\n              const endpointUrl = e.currentTarget.value;\r\n              setSettings(previous => ({...previous, endpointUrl}));\r\n            }}\r\n            onKeyDown={e => {\r\n              if (e.key === 'Enter' && canSubmit) {\r\n                onSubmit(settings);\r\n              }\r\n            }}\r\n          />\r\n          {isValidEndpoint ? null : (\r\n            <div className={'reactodia-form__control-error'}>\r\n              Invalid URL\r\n            </div>\r\n          )}\r\n        </div>\r\n        <div className='reactodia-form__control-row'>\r\n          A public SPARQL endpoints will work if only if its configured\r\n          to allow cross-origin GET queries (CORS headers).\r\n        </div>\r\n      </div>\r\n      <div className='reactodia-form__controls'>\r\n        <button className='reactodia-btn reactodia-btn-primary'\r\n          type='button'\r\n          disabled={!canSubmit}\r\n          onClick={() => onSubmit(settings)}>\r\n          Connect\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",p={sidebar_position:6},u="SPARQL Navigator",m={},g=[];function h(n){const r={a:"a",admonition:"admonition",h1:"h1",header:"header",p:"p",...(0,a.R)(),...n.components},{Details:e}=r;return e||function(n,r){throw new Error("Expected "+(r?"component":"object")+" `"+n+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.header,{children:(0,o.jsx)(r.h1,{id:"sparql-navigator",children:"SPARQL Navigator"})}),"\n",(0,o.jsxs)(r.p,{children:["Example demonstrating graph data exploration using a generic ",(0,o.jsx)(r.a,{href:"https://en.wikipedia.org/wiki/SPARQL",children:"SPARQL"})," endpoint."]}),"\n",(0,o.jsx)(r.admonition,{type:"info",children:(0,o.jsx)(r.p,{children:(0,o.jsx)(r.a,{href:"/playground/sparql",children:"\u25b6\ufe0e Open live demo"})})}),"\n","\n",(0,o.jsx)(i.A,{language:"tsx",title:"/src/examples/PlaygroundSparql.tsx",showLineNumbers:!0,children:s}),"\n",(0,o.jsxs)(e,{children:[(0,o.jsx)("summary",{children:"ExampleCommon.tsx"}),(0,o.jsx)(i.A,{language:"tsx",title:"/src/examples/ExampleCommon.tsx",showLineNumbers:!0,children:l})]}),"\n",(0,o.jsxs)(e,{children:[(0,o.jsx)("summary",{children:"HashQuery.ts"}),(0,o.jsx)(i.A,{language:"tsx",title:"/src/examples/HashQuery.ts",showLineNumbers:!0,children:c})]}),"\n",(0,o.jsxs)(e,{children:[(0,o.jsx)("summary",{children:"SparqlConnection.ts"}),(0,o.jsx)(i.A,{language:"tsx",title:"/src/examples/SparqlConnection.ts",showLineNumbers:!0,children:d})]})]})}function S(n={}){const{wrapper:r}={...(0,a.R)(),...n.components};return r?(0,o.jsx)(r,{...n,children:(0,o.jsx)(h,{...n})}):h(n)}},90211:(n,r,e)=>{e.r(r),e.d(r,{N3:()=>t});var t=e(56881)},98576:n=>{n.exports="import * as React from 'react';\r\nimport * as Reactodia from '@reactodia/workspace';\r\nimport { saveAs } from 'file-saver';\r\n\r\nexport function ExampleToolbarMenu() {\r\n  const {model, editor, overlay} = Reactodia.useWorkspace();\r\n  return (\r\n    <>\r\n      <Reactodia.ToolbarActionOpen\r\n        hotkey='Mod+O'\r\n        fileAccept='.json'\r\n        onSelect={async file => {\r\n          const preloadedElements = new Map<Reactodia.ElementIri, Reactodia.ElementModel>();\r\n          for (const element of model.elements) {\r\n            for (const data of Reactodia.iterateEntitiesOf(element)) {\r\n              preloadedElements.set(data.id, data);\r\n            }\r\n          }\r\n\r\n          const task = overlay.startTask({title: 'Importing a layout from file'});\r\n          try {\r\n            const json = await file.text();\r\n            const diagramLayout = JSON.parse(json);\r\n            await model.importLayout({\r\n              dataProvider: model.dataProvider,\r\n              diagram: diagramLayout,\r\n              preloadedElements,\r\n              validateLinks: true,\r\n            });\r\n          } catch (err) {\r\n            task.setError(new Error(\r\n              'Failed to load specified file with a diagram layout.',\r\n              {cause: err}\r\n            ));\r\n          } finally {\r\n            task.end();\r\n          }\r\n        }}>\r\n        Open diagram from file\r\n      </Reactodia.ToolbarActionOpen>\r\n      <Reactodia.ToolbarActionSave mode='layout'\r\n        hotkey='Mod+S'\r\n        onSelect={() => {\r\n          const diagramLayout = model.exportLayout();\r\n          const layoutString = JSON.stringify(diagramLayout);\r\n          const blob = new Blob([layoutString], {type: 'application/json'});\r\n          const timestamp = new Date().toISOString().replaceAll(/[Z\\s:-]/g, '');\r\n          saveAs(blob, `reactodia-diagram-${timestamp}.json`);\r\n        }}>\r\n        Save diagram to file\r\n      </Reactodia.ToolbarActionSave>\r\n      {editor.inAuthoringMode ? (\r\n        <Reactodia.ToolbarActionSave mode='authoring'\r\n          onSelect={() => {\r\n            const state = editor.authoringState;\r\n            console.log('Authoring state:', state);\r\n            alert('Please check browser console for result');\r\n          }}>\r\n          Persist changes to data\r\n        </Reactodia.ToolbarActionSave>\r\n      ) : null}\r\n      <Reactodia.ToolbarActionClearAll />\r\n      <Reactodia.ToolbarActionExport kind='exportRaster' />\r\n      <Reactodia.ToolbarActionExport kind='exportSvg' />\r\n      <Reactodia.ToolbarActionExport kind='print' hotkey='Mod+P' />\r\n    </>\r\n  );\r\n}\r\n"}}]);