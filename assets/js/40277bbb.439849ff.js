"use strict";(self.webpackChunk_reactodia_reactodia_github_io=self.webpackChunk_reactodia_reactodia_github_io||[]).push([[14501],{16593:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>c});var o=r(77810);const s={},n=o.createContext(s);function a(e){const t=o.useContext(n);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(n.Provider,{value:t},e.children)}},31752:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});const o=JSON.parse('{"id":"components/class-tree","title":"<ClassTree />","description":"`` is a component to display an element type (class) tree for the workspace.","source":"@site/docs/components/class-tree.md","sourceDirName":"components","slug":"/components/class-tree","permalink":"/docs/components/class-tree","draft":false,"unlisted":false,"editUrl":"https://github.com/reactodia/reactodia.github.io/tree/main/docs/components/class-tree.md","tags":[],"version":"current","frontMatter":{"title":"<ClassTree />"},"sidebar":"docs","previous":{"title":"<Canvas />","permalink":"/docs/components/canvas"},"next":{"title":"<ConnectionsMenu />","permalink":"/docs/components/connections-menu"}}');var s=r(64922),n=r(16593);const a={title:"<ClassTree />"},c="Class Tree",i={},d=[{value:"Styles",id:"styles",level:2}];function l(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"class-tree",children:"Class Tree"})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/docs/api/workspace/functions/ClassTree",children:(0,s.jsx)(t.code,{children:"<ClassTree />"})})," is a component to display an ",(0,s.jsx)(t.a,{href:"/docs/api/workspace/type-aliases/ElementTypeIri",children:"element type"})," (class) tree for the workspace."]}),"\n",(0,s.jsxs)(t.p,{children:["Element type graph is loaded from ",(0,s.jsx)(t.a,{href:"/docs/concepts/data-provider",children:"data provider"})," associated with the ",(0,s.jsx)(t.a,{href:"/docs/concepts/graph-model",children:"diagram model"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["In ",(0,s.jsx)(t.a,{href:"/docs/concepts/graph-authoring",children:"graph authoring"})," mode, the class tree can be used to create entity elements that are instances of the displayed types."]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["The same functionality is also available as ",(0,s.jsx)(t.code,{children:"<SearchSectionElementTypes />"})," ",(0,s.jsx)(t.a,{href:"/docs/components/unified-search",children:"unified search section"}),"."]})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-tsx",metastring:"live",live:!0,children:"function Example() {\r\n  const GRAPH_DATA = 'https://reactodia.github.io/resources/orgOntology.ttl';\r\n\r\n  const {defaultLayout} = Reactodia.useWorker(Layouts);\r\n\r\n  const {onMount} = Reactodia.useLoadedWorkspace(async ({context, signal}) => {\r\n    const {model, performLayout} = context;\r\n    const response = await fetch(GRAPH_DATA, {signal});\r\n    const graphData = new N3.Parser().parse(await response.text());\r\n    const dataProvider = new Reactodia.RdfDataProvider({acceptBlankNodes: false});\r\n    dataProvider.addGraph(graphData);\r\n    await model.createNewDiagram({dataProvider, signal});\r\n  }, []);\r\n\r\n  return (\r\n    <div className='reactodia-live-editor'>\r\n      <Reactodia.Workspace ref={onMount}\r\n        defaultLayout={defaultLayout}>\r\n          <Reactodia.WorkspaceRoot>\r\n            <Reactodia.ClassTree />\r\n          </Reactodia.WorkspaceRoot>\r\n      </Reactodia.Workspace>\r\n    </div>\r\n  );\r\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"styles",children:"Styles"}),"\n",(0,s.jsxs)(t.p,{children:["The component look can be customized using the following CSS properties (see ",(0,s.jsx)(t.a,{href:"/docs/concepts/design-system",children:"design system"})," for more information):"]}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:"Property"}),(0,s.jsx)(t.th,{children:"Description"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"--reactodia-tree-background-color-active"})}),(0,s.jsx)(t.td,{children:"Background color for a selected tree item."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"--reactodia-tree-background-color-focus"})}),(0,s.jsx)(t.td,{children:"Background color for a hovered over tree item."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"--reactodia-tree-border-color-active"})}),(0,s.jsx)(t.td,{children:"Border color for a selected tree item."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.code,{children:"--reactodia-tree-border-color-focus"})}),(0,s.jsx)(t.td,{children:"Border color for a hovered over tree item."})]})]})]})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}}}]);